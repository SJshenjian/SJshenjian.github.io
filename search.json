[{"title":"2_两数之加_leetcode","url":"http://www.shenjian.online/2019/08/13/2-两数之加-leetcode/","content":"<h2 id=\"2-两数之加\"><a href=\"#2-两数之加\" class=\"headerlink\" title=\"2. 两数之加\"></a>2. 两数之加</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>; <span class=\"comment\">// 存储进位</span></span><br><span class=\"line\">        ListNode resultNode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode firstNode = l1;</span><br><span class=\"line\">        ListNode secondNode = l2;</span><br><span class=\"line\">        ListNode currentNode = resultNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (firstNode != <span class=\"keyword\">null</span> || secondNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> firstNodeValue = firstNode != <span class=\"keyword\">null</span> ? firstNode.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> secondNodeValue = secondNode != <span class=\"keyword\">null</span> ? secondNode.val : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = carry + firstNodeValue + secondNodeValue;</span><br><span class=\"line\"></span><br><span class=\"line\">            currentNode.next = <span class=\"keyword\">new</span> ListNode(sum % <span class=\"number\">10</span>);</span><br><span class=\"line\">            carry = sum / <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            currentNode = currentNode.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                firstNode = firstNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (secondNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                secondNode = secondNode.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 最后一位也可能进位</span></span><br><span class=\"line\">            currentNode.next = <span class=\"keyword\">new</span> ListNode(carry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultNode.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">      ListNode next;</span><br><span class=\"line\">      ListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC传送门<a href=\"https://leetcode-cn.com/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener\">leetcode</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构","Leetcode"]},{"title":"1_两数之和_leetcode","url":"http://www.shenjian.online/2019/08/11/1-两数之和-leetcode/","content":"<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"1. 两数之和\"></a>1. 两数之和</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<p>示例:<br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以nums元素为key,下标为value，</span></span><br><span class=\"line\"><span class=\"comment\">     * 若遍历时存在target - nums[i]的key, 则找到输出即可</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            map.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"No two sum solution\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AC传送门<a href=\"https://leetcode-cn.com/problems/two-sum/\" target=\"_blank\" rel=\"noopener\">leetcode</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构","Leetcode"]},{"title":"快速排序","url":"http://www.shenjian.online/2019/07/23/快速排序/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 快速排序通过一个切分元素将数组分为左右两个数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 左数组元素小于等于切分元素，右数组大于等于切分元素，</span></span><br><span class=\"line\"><span class=\"comment\"> * 将左右子数组排序，整个数组也就有序了</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jian Shen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> V1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuitSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(@NotNull T[] array)</span> </span>&#123;</span><br><span class=\"line\">        shuffle(array);</span><br><span class=\"line\">        sort(array, <span class=\"number\">0</span> , array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] array, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt;= left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = partition(array, left, right);</span><br><span class=\"line\">        sort(array, left, middle - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(array, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] array, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right + <span class=\"number\">1</span>;</span><br><span class=\"line\">        T k = array[left];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (less(array[++i], k) &amp;&amp; i != right); <span class=\"comment\">// 循环1，直到找到大于等于k的元素或i增加为right</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (less(k, array[--j]) &amp;&amp; j != left); <span class=\"comment\">// 循环2，直到找到比小于等于k的元素或j减小为left</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(array, i, j); <span class=\"comment\">// 交换当前轮次找到的元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// array[left]必定小于等于array[j], happens-before原则，前置条件为break执行，</span></span><br><span class=\"line\">        <span class=\"comment\">// break前置条件为循环2执行完毕，故需交换从而保证当前切分元素必定大于等于左侧数组值，小于等于右侧数组值</span></span><br><span class=\"line\">        swap(array, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(T[] array)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Comparable&gt; list = Arrays.asList(array);</span><br><span class=\"line\">        Collections.shuffle(list); <span class=\"comment\">// 防止最坏的情况，第一次从最小的元素切分，第二次从次小的元素切分。时间复杂度N^2/2</span></span><br><span class=\"line\">        list.toArray(array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = <span class=\"keyword\">new</span> QuitSort();</span><br><span class=\"line\">        Integer[] array = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        sort.sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.asList(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多排序算法见<a href=\"https://github.com/SJshenjian/algorithm/blob/master/base/src/main/java/sort\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"归并排序","url":"http://www.shenjian.online/2019/07/21/归并排序/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 归并排序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"meta\">@author</span> Jian Shen</span><br><span class=\"line\"> * <span class=\"meta\">@version</span> V1.0.0</span><br><span class=\"line\"> * <span class=\"meta\">@date</span> <span class=\"number\">2019</span>/<span class=\"number\">7</span>/<span class=\"number\">21</span></span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> T[] assist; <span class=\"comment\">// 辅助数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数组中已经排好序的两个部分[左侧部分、右侧部分]合并</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> middle</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(@NotNull T[] array, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> middle, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = left; k &lt;= right; k++) &#123;</span><br><span class=\"line\">            assist[k] = array[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = left; k &lt;= right; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; middle) &#123; <span class=\"comment\">// 说明左侧部分已经完成合并，仅需合并右侧部分</span></span><br><span class=\"line\">                array[k] = assist[j++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; right) &#123; <span class=\"comment\">// 说明右侧部分已经完成合并，仅需合并左侧部分</span></span><br><span class=\"line\">                array[k] = assist[i++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (assist[i].compareTo(assist[j]) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                array[k] = assist[i++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                array[k] = assist[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自顶向下归并排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 将数组分成两个部分，分别进行排序，然后归并起来</span></span><br><span class=\"line\"><span class=\"comment\"> * 这种对半分的复杂度为O(NlogN)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jian Shen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> V1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/21</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Up2DownMergeSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">MergeSort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] array)</span> </span>&#123;</span><br><span class=\"line\">        assist = (T[]) <span class=\"keyword\">new</span> Comparable[array.length];</span><br><span class=\"line\">        sort(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] array, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        sort(array, left, middle);</span><br><span class=\"line\">        sort(array, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        merge(array, left, middle, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = <span class=\"keyword\">new</span> Up2DownMergeSort();</span><br><span class=\"line\">        Integer[] array = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        sort.sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.asList(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多排序算法见<a href=\"https://github.com/SJshenjian/algorithm/blob/master/base/src/main/java/sort\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"希尔排序","url":"http://www.shenjian.online/2019/07/21/希尔排序/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于大规模的数组，插入排序很慢，因为每次只能将逆序数量减1，</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序交换不相邻的元素，每次可以将逆序数量减少大于1</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序使用插入排序对间隔h的序列进行排序，通过不断减小h至1，就可以使得数组是有序的</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jian Shen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> V1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/21</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(@NotNull T[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (h &lt; length / <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            h = <span class=\"number\">3</span> * h + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h; j -= h) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (less(array[j], array[j - h])) &#123;</span><br><span class=\"line\">                        swap(array, j, j - h);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            h /= <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = <span class=\"keyword\">new</span> ShellSort();</span><br><span class=\"line\">        Integer[] array = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        sort.sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.asList(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多排序算法见<a href=\"https://github.com/SJshenjian/algorithm/blob/master/base/src/main/java/sort\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"插入排序","url":"http://www.shenjian.online/2019/07/20/插入排序/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 每次将当前元素插入到左侧已经排序的数组中，插入之后左侧数组依然有序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于数组 &#123;3, 5, 2, 4, 1&#125;，它具有以下逆序：(3, 2), (3, 1), (5, 2), (5, 4), (5, 1), (2, 1), (4, 1)，</span></span><br><span class=\"line\"><span class=\"comment\"> * 插入排序每次只能交换相邻元素，令逆序数量减少 1，因此插入排序需要交换的次数为逆序数量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jian Shen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> V1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (less(array[j], array[j - <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                    swap(array, j, j -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = <span class=\"keyword\">new</span> InsertSort();</span><br><span class=\"line\">        Integer[] array = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        sort.sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.asList(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多排序算法见<a href=\"https://github.com/SJshenjian/algorithm/blob/master/base/src/main/java/sort\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"冒泡排序","url":"http://www.shenjian.online/2019/07/20/冒泡排序/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 从左到右不断交换相邻逆序的元素，在一轮循环后，可以让未排序的最大元素上浮至最右侧</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一轮循环中，如果没有发生交换，则说明此时数组已经有序，可以直接退出</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jian Shen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> V1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(@NotNull T[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sorted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span> &amp;&amp; !sorted; i--) &#123;</span><br><span class=\"line\">            sorted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (less(array[j + <span class=\"number\">1</span>], array[j])) &#123;</span><br><span class=\"line\">                    sorted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    swap(array, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = <span class=\"keyword\">new</span> BubbleSort();</span><br><span class=\"line\">        Integer[] array = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        sort.sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.asList(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多排序算法见<a href=\"https://github.com/SJshenjian/algorithm/blob/master/base/src/main/java/sort\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"选择排序","url":"http://www.shenjian.online/2019/07/20/选择排序/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选择排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 从数组中第一个位置开始循环数组选择最小的一个元素放于数组第一个位置，然后</span></span><br><span class=\"line\"><span class=\"comment\"> * 从数组中第二个位置开始循环数组选择最小的一个元素放于数组的第二个位置，</span></span><br><span class=\"line\"><span class=\"comment\"> * 依此类推，直到整个数组排序</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jian Shen</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> V1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/7/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectSort</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Sort</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(@NotNull T[] array)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (less(array[j], array[min])) &#123;</span><br><span class=\"line\">                    min = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(array, i, min);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = <span class=\"keyword\">new</span> SelectSort();</span><br><span class=\"line\">        Integer[] array = <span class=\"keyword\">new</span> Integer[]&#123;<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        sort.sort(array);</span><br><span class=\"line\">        System.out.println(Arrays.asList(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多排序算法见<a href=\"https://github.com/SJshenjian/algorithm/blob/master/base/src/main/java/sort\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"Docker快速部署kibana","url":"http://www.shenjian.online/2019/07/07/Docker快速部署kibana/","content":"<p>基于CentOS7，VMWare虚拟机给其分配了2G内存, <strong>防火墙已关闭</strong></p>\n<h2 id=\"1-编写docker-compose-yml\"><a href=\"#1-编写docker-compose-yml\" class=\"headerlink\" title=\"1. 编写docker-compose.yml\"></a>1. 编写docker-compose.yml</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  kibana:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">docker.elastic.co/kibana/kibana:7.2.0</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"5601:5601\"</span> <span class=\"comment\"># 再次强调，一定要做端口映射,否则无法远程访问</span></span><br><span class=\"line\">    <span class=\"comment\">#volumes: 先注释挂载，后面后讲到原因</span></span><br><span class=\"line\">    <span class=\"comment\">#  - ./kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-启动kibana并复制kibana-yml文件\"><a href=\"#2-启动kibana并复制kibana-yml文件\" class=\"headerlink\" title=\"2. 启动kibana并复制kibana.yml文件\"></a>2. 启动kibana并复制kibana.yml文件</h2><p><code>docker-compose up -d</code>启动kibana后，<code>docker ps -a</code>查看启动后的容器ID为0481b574ce11</p>\n<p>执行复制命令<br>将容器中的kibana.yml文件复制到本机/opt/kibana/kibana.yml<br><strong>这样避免因为不同版本的差异导致配置文件不同，从网络上搜索的配置文件与版本不兼容问题</strong></p>\n<p><code>docker cp 04:/usr/share/kibana/config/kibana.yml /opt/kibana/kibana.yml</code></p>\n<h2 id=\"3-修改docekr-compose-yml文件与kibana-yml文件-kibana版本为7-2-0\"><a href=\"#3-修改docekr-compose-yml文件与kibana-yml文件-kibana版本为7-2-0\" class=\"headerlink\" title=\"3.修改docekr-compose.yml文件与kibana.yml文件(kibana版本为7.2.0)\"></a>3.修改docekr-compose.yml文件与kibana.yml文件(kibana版本为7.2.0)</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  kibana:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">docker.elastic.co/kibana/kibana:7.2.0</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"5601:5601\"</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span> <span class=\"comment\"># 放开注释，配置文件挂载</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">server.name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\"><span class=\"string\">server.host:</span> <span class=\"string\">\"0.0.0.0\"</span></span><br><span class=\"line\"><span class=\"string\">elasticsearch.hosts:</span> <span class=\"string\">[</span> <span class=\"string\">\"http://192.168.153.151:9200\"</span> <span class=\"string\">]</span> <span class=\"comment\"># kibana依赖于elasticsearch,请先确保其正常启动，修改IP地址为elasticsearch地址</span></span><br><span class=\"line\"><span class=\"string\">elasticsearch.requestTimeout:</span> <span class=\"number\">90000</span> <span class=\"comment\"># 默认30000</span></span><br><span class=\"line\"><span class=\"string\">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-重新启动，远程访问\"><a href=\"#4-重新启动，远程访问\" class=\"headerlink\" title=\"4. 重新启动，远程访问\"></a>4. 重新启动，远程访问</h3><p><code>docker-compose down</code><br><code>docker-compose up -d</code></p>\n<p><a href=\"http://192.168.153.151:5601开始kibana之旅吧\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:5601开始kibana之旅吧</a></p>\n","categories":["Docker"],"tags":["Docker","Kibana"]},{"title":"Docker快速部署elasticsearch","url":"http://www.shenjian.online/2019/06/30/Docker快速部署elasticsearch/","content":"<p>基于CentOS7，VMWare虚拟机给其分配了2G内存, <strong>防火墙已关闭</strong></p>\n<h2 id=\"1-编写docker-compose-yml\"><a href=\"#1-编写docker-compose-yml\" class=\"headerlink\" title=\"1. 编写docker-compose.yml\"></a>1. 编写docker-compose.yml</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2.2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  es01:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">elasticsearch:7.2.0</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">es01</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">node.name=es01</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">discovery.seed_hosts=es02</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.initial_master_nodes=es01,es02</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.name=docker-cluster</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"ES_JAVA_OPTS=-Xms256m -Xmx256m\"</span></span><br><span class=\"line\"><span class=\"attr\">    ulimits:</span></span><br><span class=\"line\"><span class=\"attr\">      memlock:</span></span><br><span class=\"line\"><span class=\"attr\">        soft:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">        hard:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - esdata01:</span><span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"><span class=\"attr\">  es02:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">elasticsearch:7.2.0</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">es02</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">node.name=es02</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">discovery.seed_hosts=es01</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.initial_master_nodes=es01,es02</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.name=docker-cluster</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"ES_JAVA_OPTS=-Xms256m -Xmx256m\"</span></span><br><span class=\"line\"><span class=\"attr\">    ulimits:</span></span><br><span class=\"line\"><span class=\"attr\">      memlock:</span></span><br><span class=\"line\"><span class=\"attr\">        soft:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">        hard:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - esdata02:</span><span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">  esdata01:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  esdata02:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  esnet:</span></span><br></pre></td></tr></table></figure>\n<p>PS: <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch官方docker-compose.yml</a></p>\n<h2 id=\"2-设置vm-max-map-count\"><a href=\"#2-设置vm-max-map-count\" class=\"headerlink\" title=\"2. 设置vm.max_map_count\"></a>2. 设置vm.max_map_count</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vm.max_map_count： 一个进程可以拥有的VMA(虚拟内存区域)的数量</span></span><br><span class=\"line\"><span class=\"comment\"># 单个JVM能开启的最大线程数为vm.max_map_count的一半，即10W线程</span></span><br><span class=\"line\"><span class=\"comment\"># 临时性修改 本质262144写入文件/proc/sys/vm/max_map_count中</span></span><br><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [建议]永久性无法修改/proc/sys/vm/max_map_count文件，但linux中允许直接修改/etc/sysctl.conf,故直接在该文件末添加参数并查看</span></span><br><span class=\"line\">sysctl -p <span class=\"comment\"># 使得修改立即生效，即使重启也生效</span></span><br><span class=\"line\">grep vm.max_map_count /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">官网</a>说明：<br>The vm.max_map_count kernel setting needs to be set to at least 262144 for production use. </p>\n<h2 id=\"3-启动并查看相关信息\"><a href=\"#3-启动并查看相关信息\" class=\"headerlink\" title=\"3. 启动并查看相关信息\"></a>3. 启动并查看相关信息</h2><p>执行<code>docker-compose up -d</code>启动</p>\n<p>[root@centos7 elasticsearch]# docker container ls<br>CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                              NAMES<br>ccd713fa8ff6        elasticsearch:7.2.0   “/usr/local/bin/dock…”   55 seconds ago      Up 51 seconds       0.0.0.0:9200-&gt;9200/tcp, 9300/tcp   es01<br>7d1ff4a506d0        elasticsearch:7.2.0   “/usr/local/bin/dock…”   55 seconds ago      Up 51 seconds       9200/tcp, 9300/tcp                 es02</p>\n<p><a href=\"http://192.168.153.151:9200/\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:9200/</a><br>{<br>  “name” : “es01”,<br>  “cluster_name” : “docker-cluster”,<br>  “cluster_uuid” : “1FJ55641T7ignLt7APzQVQ”,<br>  “version” : {<br>    “number” : “7.2.0”,<br>    “build_flavor” : “default”,<br>    “build_type” : “docker”,<br>    “build_hash” : “508c38a”,<br>    “build_date” : “2019-06-20T15:54:18.811730Z”,<br>    “build_snapshot” : false,<br>    “lucene_version” : “8.0.0”,<br>    “minimum_wire_compatibility_version” : “6.8.0”,<br>    “minimum_index_compatibility_version” : “6.0.0-beta1”<br>  },<br>  “tagline” : “You Know, for Search”<br>}</p>\n<p><a href=\"http://192.168.153.151:9200/_cat/health\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:9200/_cat/health</a><br>1561904921 14:28:41 docker-cluster green 2 2 0 0 0 0 0 0 - 100.0%</p>\n<p><a href=\"http://192.168.153.151:9200/_cat/nodes\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:9200/_cat/nodes</a><br>172.18.0.3 55 95 7 0.23 2.63 3.50 mdi * es01<br>172.18.0.2 51 95 7 0.23 2.63 3.50 mdi - es02</p>\n<p>单机多实例启动成功~~~~</p>\n<p><code>docker container stop ccd713fa8ff6</code>停掉es01时，访问：</p>\n<p><a href=\"http://192.168.153.151:9200\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:9200</a> 显示结果不变</p>\n<p><a href=\"http://192.168.153.151:9200/_cat/health\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:9200/_cat/health</a><br>1561905162 14:32:42 docker-cluster green 1 1 0 0 0 0 0 0 - 100.0%</p>\n<p><a href=\"http://192.168.153.151:9200/_cat/nodes\" target=\"_blank\" rel=\"noopener\">http://192.168.153.151:9200/_cat/nodes</a><br>172.18.0.3 40 68 0 0.02 0.69 2.26 mdi * es01</p>\n","categories":["Docker"],"tags":["Docker","Elasticsearch"]},{"title":"ELK Stack家族成员及应用场景","url":"http://www.shenjian.online/2019/06/30/ELK-Stack家族成员及应用场景/","content":"<h2 id=\"1-Elastic-Stack生态圈\"><a href=\"#1-Elastic-Stack生态圈\" class=\"headerlink\" title=\"1. Elastic Stack生态圈\"></a>1. Elastic Stack生态圈</h2><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/Elastic-Stack生态圈.png\" alt=\"Elastic Stack生态圈\"></p>\n<h2 id=\"2-Logstash-数据处理管道\"><a href=\"#2-Logstash-数据处理管道\" class=\"headerlink\" title=\"2. Logstash:数据处理管道\"></a>2. Logstash:数据处理管道</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><ul>\n<li>开源的服务器端数据处理工具，支持从不同来源采集数据，转换数据，并将数据发送到不同的存储库中</li>\n<li>最初用来做日志的采集与处理</li>\n</ul>\n<h3 id=\"2-2-特性\"><a href=\"#2-2-特性\" class=\"headerlink\" title=\"2.2 特性\"></a>2.2 特性</h3><ul>\n<li>实时解析与转换数据<ul>\n<li>从IP地址中破译出地理坐标</li>\n<li>将PII数据匿名化，完全排除敏感字段</li>\n</ul>\n</li>\n<li>可扩展性<ul>\n<li>200多个插件(日志/数据库/Arcsigh/Netflow)</li>\n</ul>\n</li>\n<li>可靠安全性<ul>\n<li>Logstash通过持久化队列来保证至少将运行中的事件运行一次</li>\n<li>数据传输加密</li>\n</ul>\n</li>\n<li>监控</li>\n</ul>\n<h2 id=\"3-Kibana-可视化分析利器\"><a href=\"#3-Kibana-可视化分析利器\" class=\"headerlink\" title=\"3. Kibana:可视化分析利器\"></a>3. Kibana:可视化分析利器</h2><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/Kibana.png\" alt=\"Kibana\"></p>\n<h2 id=\"4-BEATS-轻量的数据采集器\"><a href=\"#4-BEATS-轻量的数据采集器\" class=\"headerlink\" title=\"4. BEATS:轻量的数据采集器\"></a>4. BEATS:轻量的数据采集器</h2><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/Beats系列.png\" alt=\"Beats系列\"></p>\n<h2 id=\"5-ELK应用场景\"><a href=\"#5-ELK应用场景\" class=\"headerlink\" title=\"5. ELK应用场景\"></a>5. ELK应用场景</h2><ul>\n<li>网站搜索、垂直搜索、代码搜索</li>\n<li>日志管理与分析、安全指标监控、应用性能监控、WEB抓取舆情分析</li>\n</ul>\n<h3 id=\"5-1-搜索型业务场景\"><a href=\"#5-1-搜索型业务场景\" class=\"headerlink\" title=\"5.1 搜索型业务场景\"></a>5.1 搜索型业务场景</h3><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/与数据库集成.png\" alt=\"与数据库集成\"></p>\n<ul>\n<li>单独使用Elsticserch存储(不推荐)</li>\n<li>以下情况下课考虑与数据库集成<ul>\n<li>与现有系统的集成</li>\n<li>需考虑事务</li>\n<li>数据更新频繁</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-日志型业务场景\"><a href=\"#5-2-日志型业务场景\" class=\"headerlink\" title=\"5.2 日志型业务场景\"></a>5.2 日志型业务场景</h3><h4 id=\"5-2-1-日志管理\"><a href=\"#5-2-1-日志管理\" class=\"headerlink\" title=\"5.2.1 日志管理\"></a>5.2.1 日志管理</h4><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/日志管理.png\" alt=\"日志管理\"></p>\n<h4 id=\"5-2-2-指标分析、日志分析\"><a href=\"#5-2-2-指标分析、日志分析\" class=\"headerlink\" title=\"5.2.2 指标分析、日志分析\"></a>5.2.2 指标分析、日志分析</h4><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/指标分析_日志分析.png\" alt=\"指标分析_日志分析\"></p>\n<h4 id=\"5-2-3-安全分析-集成ArcSight\"><a href=\"#5-2-3-安全分析-集成ArcSight\" class=\"headerlink\" title=\"5.2.3 安全分析:集成ArcSight\"></a>5.2.3 安全分析:集成ArcSight</h4><p><img src=\"/2019/06/30/ELK-Stack家族成员及应用场景/集成ArcSight.png\" alt=\"集成ArcSight.png\"></p>\n","categories":["Elasticsearch"],"tags":["Elasticsearch"]},{"title":"Elasticsearch简介","url":"http://www.shenjian.online/2019/06/29/Elasticsearch简介/","content":"<p>Elasticsearch(开源分布式搜索引擎): 近实时、分布式存储/搜索/分析引擎</p>\n<h2 id=\"1-起源\"><a href=\"#1-起源\" class=\"headerlink\" title=\"1. 起源\"></a>1. 起源</h2><p>Elasticsearch起源于Lucene</p>\n<ul>\n<li>基于Java语言开发的搜索引擎类库</li>\n<li>高性能、易扩展</li>\n<li>Lucene的局限性: <ul>\n<li>只能基于Java语言开发</li>\n<li>类库学习曲线陡峭</li>\n<li>原生并不支持水平扩展</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-诞生\"><a href=\"#2-诞生\" class=\"headerlink\" title=\"2. 诞生\"></a>2. 诞生</h2><ul>\n<li>2004年Shay Banon基于Lucene开发了Compass</li>\n<li>2010年Shay Banon重写Compass, 取名为Elasticsearch<ul>\n<li>支持分布式，可水平扩展</li>\n<li>降低全文检索学习曲线，可以被任何语言调用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-分布式架构\"><a href=\"#3-分布式架构\" class=\"headerlink\" title=\"3. 分布式架构\"></a>3. 分布式架构</h2><p><img src=\"/2019/06/29/Elasticsearch简介/Elasticsearch分布式架构.png\" alt=\"Elasticsearch的分布式架构\"></p>\n<ul>\n<li>集群规模可以从单个扩展到数百个</li>\n<li>高可用&amp;水平扩展<ul>\n<li>服务和数据两个维度</li>\n</ul>\n</li>\n<li>支持不同的节点类型<ul>\n<li>支持Hot&amp;Warm架构</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-支持多种继承方式接入\"><a href=\"#4-支持多种继承方式接入\" class=\"headerlink\" title=\"4. 支持多种继承方式接入\"></a>4. 支持多种继承方式接入</h2><ul>\n<li>多种编程语言的类库</li>\n<li>RESTful API v.s Transport API</li>\n<li>JDBC &amp; ODBC</li>\n</ul>\n<h2 id=\"5-主要功能\"><a href=\"#5-主要功能\" class=\"headerlink\" title=\"5. 主要功能\"></a>5. 主要功能</h2><ul>\n<li>海量数据的分布式存储及集群管理<ul>\n<li>服务与数据两个维度，水平扩展</li>\n</ul>\n</li>\n<li>近实时搜索，性能卓越<ul>\n<li>结构化/全文/地理位置/自动完成</li>\n</ul>\n</li>\n<li>海量数据的近实时分析<ul>\n<li>聚合功能</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-版本与新特性\"><a href=\"#6-版本与新特性\" class=\"headerlink\" title=\"6. 版本与新特性\"></a>6. 版本与新特性</h2><h3 id=\"6-1-新特性-5-X\"><a href=\"#6-1-新特性-5-X\" class=\"headerlink\" title=\"6.1 新特性 5.X\"></a>6.1 新特性 5.X</h3><ul>\n<li>Lucene 6.X,性能能提升，默认打分机制从TF-IDF改为BM 25</li>\n<li>支持Ingest节点/Painless Scripting/Completion suggested支持/原生的Java REST客户端</li>\n<li>Type标记成deprecated,新增Keyword类型支持</li>\n<li>性能优化<ul>\n<li>内部引擎移除了避免同一文档并发更新的竞争锁，性能提升15%~20%</li>\n<li>Instant aggregation,支持分片上聚合的缓存</li>\n<li>新增了Profile API</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-新特性-6-X\"><a href=\"#6-2-新特性-6-X\" class=\"headerlink\" title=\"6.2 新特性 6.X\"></a>6.2 新特性 6.X</h3><ul>\n<li>Lucene 7.X</li>\n<li>新功能<ul>\n<li>跨集群复制(CCR)</li>\n<li>索引生命周期管理</li>\n<li>SQL的支持</li>\n</ul>\n</li>\n<li>更友好的升级及数据迁移<ul>\n<li>在主要版本间升级更为简化</li>\n<li>全新的基于操作的数据复制框架，可加快恢复数据</li>\n</ul>\n</li>\n<li>性能优化<ul>\n<li>有效存储稀疏字段的新方法，降低了存储成本</li>\n<li>在索引时进行排序，可加快排序的查询性能</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-3-新特性-7-X\"><a href=\"#6-3-新特性-7-X\" class=\"headerlink\" title=\"6.3 新特性 7.X\"></a>6.3 新特性 7.X</h3><ul>\n<li>Lucene 8.0</li>\n<li>重大改进-正式废除单个索引下的多Type的支持</li>\n<li>7.1开始，Security功能免费使用</li>\n<li>ECK - Elasticsearch Operator on Kubernetes</li>\n<li>新功能<ul>\n<li>New Cluster coordition</li>\n<li>Future-Complete High Level REST Client</li>\n<li>Script Score Query</li>\n</ul>\n</li>\n<li>性能优化<ul>\n<li>默认的Primary Shard数从5改为1，避免Over Sharding</li>\n<li>性能优化，更快的Top K</li>\n</ul>\n</li>\n</ul>\n","categories":["Elasticsearch"],"tags":["Elasticsearch"]},{"title":"Docker快速安装kafka","url":"http://www.shenjian.online/2019/06/23/Docker快速安装kafka/","content":"<p>同样基于docker-compose安装，<a href=\"https://shenjian.online/2019/06/09/Docker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2nginx/\" target=\"_blank\" rel=\"noopener\">Docker快速部署nginx</a>中有讲到，不在重述</p>\n<h2 id=\"1-编写docker-compose-yml\"><a href=\"#1-编写docker-compose-yml\" class=\"headerlink\" title=\"1. 编写docker-compose.yml\"></a>1. 编写docker-compose.yml</h2><p>个人习惯放在/opt/下，如/opt/kafka, /opt/nginx, docker-compose.yml如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  zookeeper:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/zookeeper</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"2181:2181\"</span> <span class=\"comment\"># 端口不可省略，否则，docker会内部会随机分配端口，造成zk connected refused</span></span><br><span class=\"line\"><span class=\"attr\">  kafka:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9092:9092\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ADVERTISED_HOST_NAME:</span> <span class=\"number\">192.168</span><span class=\"number\">.153</span><span class=\"number\">.152</span> <span class=\"comment\"># 宿主IP地址，此为我虚拟机地址</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"attr\">zookeeper:2181</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-启动kafka\"><a href=\"#2-启动kafka\" class=\"headerlink\" title=\"2. 启动kafka\"></a>2. 启动kafka</h2><p><code>docker-compose up -d</code></p>\n<p>Creating kafka_kafka_1     … done<br>Creating kafka_zookeeper_1 … done</p>\n<h2 id=\"3-消息生产消费验证\"><a href=\"#3-消息生产消费验证\" class=\"headerlink\" title=\"3. 消息生产消费验证\"></a>3. 消息生产消费验证</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it kafka_kafka_1 /bin/bash <span class=\"comment\"># 进入kafka终端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建test主题，副本1，分区1</span></span><br><span class=\"line\">kafka-topics.sh --create --topic <span class=\"built_in\">test</span> --zookeeper kafka_zookeeper_1:2181 --replication-factor 1 --partitions 1</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-topics.sh --list --zookeeper kafka_zookeeper_1:2181 <span class=\"comment\"># 查看刚才创建的test分区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布消息，输入几条消息后，按^C退出发布</span></span><br><span class=\"line\">kafka-console-producer.sh --topic=<span class=\"built_in\">test</span> --broker-list kafka_kafka_1:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收消息</span></span><br><span class=\"line\">kafka-console-consumer.sh --bootstrap-server kafka_kafka_1:9092 --from-beginning --topic <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>如果正常的话，发布的消息能够接收到，开始愉悦的kafka之旅吧~~~</p>\n","categories":["Docker"],"tags":["Docker","Kafka"]},{"title":"AQS队列同步器实现分析","url":"http://www.shenjian.online/2019/06/22/AQS队列同步器实现分析/","content":"<h2 id=\"1-同步队列\"><a href=\"#1-同步队列\" class=\"headerlink\" title=\"1. 同步队列\"></a>1. 同步队列</h2><p>AQS内部依靠同步队列(FIFO双向队列)来管理同步状态，当线程获取同步状态失败时，AQS通过构造Node节点将线程加入同步队列，同步状态释放时，会把首节点的线程唤醒，使其再次尝试获取同步状态。</p>\n<h3 id=\"1-1-Node节点\"><a href=\"#1-1-Node节点\" class=\"headerlink\" title=\"1.1 Node节点\"></a>1.1 Node节点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED =  <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIGNAL    = -<span class=\"number\">1</span>; <span class=\"comment\">// 后继节点的线程处于等待状态</span></span><br><span class=\"line\">        <span class=\"comment\">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONDITION = -<span class=\"number\">2</span>; <span class=\"comment\">// 表明节点在等待队列中 当其他线程调用了Condition的singnal()方法后，该节点会转移至同步队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus value to indicate the next acquireShared should</span></span><br><span class=\"line\"><span class=\"comment\">         * unconditionally propagate</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PROPAGATE = -<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus; <span class=\"comment\">// 等待状态(CANCELLED、SIGNAL、CONDITION、PROPAGATE) </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">volatile</span> Node prev;  <span class=\"comment\">// 前驱节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">volatile</span> Node next; <span class=\"comment\">// 后继节点</span></span><br><span class=\"line\">\t\tNode nextWaiter; <span class=\"comment\">// 等待队列中的后继节点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">volatile</span> Thread thread; <span class=\"comment\">// 获取同步状态的线程</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-节点加入同步队列\"><a href=\"#1-2-节点加入同步队列\" class=\"headerlink\" title=\"1.2 节点加入同步队列\"></a>1.2 节点加入同步队列</h3><p>线程获取同步状态失败后，构造为Node节点加入同步队列，主要通过CAS compareAndSetTail(Node except, Node update)设置尾节点。</p>\n<h3 id=\"1-3-节点移出同步队列\"><a href=\"#1-3-节点移出同步队列\" class=\"headerlink\" title=\"1.3 节点移出同步队列\"></a>1.3 节点移出同步队列</h3><p>同步队列首节点的线程在释放同步状态时(waitStatus=SINGAL)，将会唤醒后继节点，由于首节点为获取同步状态成功的线程，故无需CAS设置后续节点为首节点即可。</p>\n<h2 id=\"2-独占式同步状态获取与释放\"><a href=\"#2-独占式同步状态获取与释放\" class=\"headerlink\" title=\"2. 独占式同步状态获取与释放\"></a>2. 独占式同步状态获取与释放</h2><h2 id=\"3-共享式同步状态获取与释放\"><a href=\"#3-共享式同步状态获取与释放\" class=\"headerlink\" title=\"3. 共享式同步状态获取与释放\"></a>3. 共享式同步状态获取与释放</h2><h2 id=\"4-独占式超时获取同步状态\"><a href=\"#4-独占式超时获取同步状态\" class=\"headerlink\" title=\"4. 独占式超时获取同步状态\"></a>4. 独占式超时获取同步状态</h2>","categories":["多线程"],"tags":["多线程"]},{"title":"happens-before规则","url":"http://www.shenjian.online/2019/06/16/happens-before规则/","content":"<p>happends-before是JMM最核心的概念，理解happends-befores是理解JMM的关键。</p>\n<h2 id=\"1-happends-before关系定义如下\"><a href=\"#1-happends-before关系定义如下\" class=\"headerlink\" title=\"1. happends-before关系定义如下\"></a>1. happends-before关系定义如下</h2><p>1) 如果一个操作happends-before另一个操作，那么另一个操作执行的结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前<br>2) 两个操作之间存在happends-before关系，并不意味着java平台的具体实现必须要按happends-before关系执行的顺序来执行，如果重排序之后的执行结果，与按happends-before关系来执行的结果一致，那么这种重排序并不非法。</p>\n<h2 id=\"2-happends-before规则\"><a href=\"#2-happends-before规则\" class=\"headerlink\" title=\"2. happends-before规则\"></a>2. happends-before规则</h2><p>1) 程序顺序规则： <em>一个线程的每个操作，happends-before于该线程中任意的后续操作</em><br>2) 监视器锁规则： <em>对一个锁的解锁，happends-before于任意后续对这个锁的加锁</em><br>3) volatile变量规则： <em>对一个volatile的写，happends-before于任意后续对该volatile域的读</em><br>4) 传递性： 如果A happends-before B 且 B happends-before，那么 A happends before C<br>5) start()规则: 如果线程A执行操作ThreadB.start(),那么A线程的ThreadB.start()操作happends before于线程B的任意操作<br>6) join()规则：如果线程A执行操作ThreadB.join()方法并成功返回，则线程B中的任意操作happends before于线程A从ThreadB.join()操作成功返回</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"JAVA流实现文件批量打包下载","url":"http://www.shenjian.online/2019/06/11/JAVA流实现文件批量打包下载/","content":"<p>话不多说，直接撸代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloadFiles</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, String[] filePaths)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (filePaths == <span class=\"keyword\">null</span> || filePaths.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 设置响应头</span></span><br><span class=\"line\">       response.reset();</span><br><span class=\"line\">       response.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">       response.setContentType(<span class=\"string\">\"multipart/form-data\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 设置压缩包名称及不同浏览器中文乱码处理</span></span><br><span class=\"line\">       DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class=\"string\">\"yyyyMMddHHmmss\"</span>);</span><br><span class=\"line\">       LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class=\"line\">       String filename = <span class=\"string\">\"电子合同\"</span> + formatter.format(localDateTime) + <span class=\"string\">\".zip\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       String agent = request.getHeader(<span class=\"string\">\"AGENT\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (agent.contains(<span class=\"string\">\"MSIE\"</span>) || agent.contains(<span class=\"string\">\"Trident\"</span>)) &#123;</span><br><span class=\"line\">                   filename = URLEncoder.encode(filename, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               filename = <span class=\"keyword\">new</span> String(filename.getBytes(<span class=\"string\">\"UTF-8\"</span>), <span class=\"string\">\"ISO-8859-1\"</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       response.setHeader(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment;filename=\\\"\"</span> + filename  + <span class=\"string\">\"\\\"\"</span>); <span class=\"comment\">// key不区分大小写</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 设置压缩流，直接写入response,实现边压缩边下载</span></span><br><span class=\"line\">           ZipOutputStream zipOutputStream = <span class=\"keyword\">new</span> ZipOutputStream(<span class=\"keyword\">new</span> BufferedOutputStream(response.getOutputStream()));</span><br><span class=\"line\">           zipOutputStream.setMethod(ZipOutputStream.DEFLATED);</span><br><span class=\"line\"></span><br><span class=\"line\">           DataOutputStream dataOutputStream = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (String filePath : filePaths) &#123;</span><br><span class=\"line\">               String subFilename = formatter.format(LocalDateTime.now()) + filePath.substring(filePath.lastIndexOf(<span class=\"string\">\"/\"</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">               zipOutputStream.putNextEntry(<span class=\"keyword\">new</span> ZipEntry(subFilename));</span><br><span class=\"line\"></span><br><span class=\"line\">               dataOutputStream = <span class=\"keyword\">new</span> DataOutputStream(zipOutputStream);</span><br><span class=\"line\">               BufferedInputStream bufferedInputStream = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(filePath)));</span><br><span class=\"line\">               <span class=\"keyword\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">8192</span>];</span><br><span class=\"line\">               <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">while</span> ((length = bufferedInputStream.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                   dataOutputStream.write(buf, <span class=\"number\">0</span> , length);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dataOutputStream.flush();</span><br><span class=\"line\">               <span class=\"comment\">// dataOutputStream.close(); 若在此关闭，对应资源zipOutputStream也将关闭，则压缩包内仅有一个文件</span></span><br><span class=\"line\">               bufferedInputStream.close();</span><br><span class=\"line\">               zipOutputStream.closeEntry();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           dataOutputStream.flush();</span><br><span class=\"line\">           dataOutputStream.close();</span><br><span class=\"line\">           zipOutputStream.close();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","categories":["工作干货"],"tags":["工作干货"]},{"title":"Docker快速部署nginx","url":"http://www.shenjian.online/2019/06/09/Docker快速部署nginx/","content":"<p>默认读者已经安装好docker</p>\n<p>推荐使用docker-compose方式进行容器运行</p>\n<h1 id=\"1-安装docker-compose\"><a href=\"#1-安装docker-compose\" class=\"headerlink\" title=\"1. 安装docker-compose\"></a>1. 安装docker-compose</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -U docker-compose</span><br></pre></td></tr></table></figure>\n<p>安装后查看版本<code>docker-compose version</code></p>\n<h1 id=\"2-下载nginx\"><a href=\"#2-下载nginx\" class=\"headerlink\" title=\"2. 下载nginx\"></a>2. 下载nginx</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx:stable-alpine <span class=\"comment\"># 建议下载稳定版本</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-编写docker-compose-yml文件\"><a href=\"#3-编写docker-compose-yml文件\" class=\"headerlink\" title=\"3.编写docker-compose.yml文件\"></a>3.编写docker-compose.yml文件</h1><p>我所创建文件位置为/opt/nginx/docker-compose.yml(docker-compose.yml文件名不可更改,否则docker-compose命令无法识别)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  nginx:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">nginx</span> <span class=\"comment\"># 命名容器名称,便于容器管理</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">nginx:stable-alpine</span> <span class=\"comment\"># 刚才下载的nginx镜像</span></span><br><span class=\"line\"><span class=\"attr\">    network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span> </span><br><span class=\"line\"><span class=\"attr\">    volumes:</span> <span class=\"comment\"># 目录挂载</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/nginx/nginx.conf:/etc/nginx/nginx.conf</span> </span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/nginx/cert:/etc/nginx/cert</span> </span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/nginx/html:/usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/var/log/nginx:/var/log/nginx</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">NGINX_HOST=47.74.188.157</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">NGINX_PORT=80</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-下载并修改本地-opt-nginx-nginx-conf文件\"><a href=\"#4-下载并修改本地-opt-nginx-nginx-conf文件\" class=\"headerlink\" title=\"4.下载并修改本地/opt/nginx/nginx.conf文件\"></a>4.下载并修改本地/opt/nginx/nginx.conf文件</h1><p>在docker-compose.yml同级目录/opt/nginx下下载nginx.conf文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/nginx/nginx/blob/master/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user root; <span class=\"comment\"># 第2行#user nobody修改为user root; 表示以root权限读取本地目录，否则报403错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">include conf.d/*.conf; <span class=\"comment\"># 第16行新增该配置文件,便于多域名配置实现(下面很快说到)</span></span><br><span class=\"line\"></span><br><span class=\"line\">server_name  47.74.188.157 <span class=\"comment\"># 第37行左右修改server_name localhost 为本机IP地址</span></span><br></pre></td></tr></table></figure>\n<p>详情如图所示 <img src=\"/2019/06/09/Docker快速部署nginx/nginx.conf.png\" alt=\"nginx.conf\"></p>\n<h1 id=\"5-配置域名conf文件\"><a href=\"#5-配置域名conf文件\" class=\"headerlink\" title=\"5.配置域名conf文件\"></a>5.配置域名conf文件</h1><p>在/opt/nginx/conf.d目录新建文件shenjian.online.conf,如果有其他域名，则在该目录下新建即可，如996icu.online.conf</p>\n<p>shenjian.online.conf 配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  www.shenjian.online; <span class=\"comment\"># 所要使用的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">           root /usr/share/nginx/html; <span class=\"comment\"># 非/opt/nginx/html本地目录，而为docker容器nginx映射目录</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 相关配置请查看具体证书提供商如阿里云配置说明</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 443 ssl;</span><br><span class=\"line\">\tserver_name www.shenjian.online; <span class=\"comment\"># localhost修改为您证书绑定的域名。</span></span><br><span class=\"line\">\tssl_certificate cert/shenjian.online.pem;   <span class=\"comment\"># 将domain name.pem替换成您证书的文件名。</span></span><br><span class=\"line\">\tssl_certificate_key cert/shenjian.online.key;   <span class=\"comment\"># 将domain name.key替换成您证书的密钥文件名。</span></span><br><span class=\"line\">\tssl_session_timeout 5m;</span><br><span class=\"line\">\tssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <span class=\"comment\"># 使用此加密套件。</span></span><br><span class=\"line\">\tssl_protocols TLSv1 TLSv1.1 TLSv1.2;   <span class=\"comment\"># 使用该协议进行配置。</span></span><br><span class=\"line\">\tssl_prefer_server_ciphers on;   </span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\troot /usr/share/nginx/html; <span class=\"comment\"># 非/opt/nginx/html本地目录，而为docker容器nginx映射目录</span></span><br><span class=\"line\">\t\tindex index.html index.htm;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-证书文件导入-无则忽略\"><a href=\"#6-证书文件导入-无则忽略\" class=\"headerlink\" title=\"6. 证书文件导入(无则忽略)\"></a>6. 证书文件导入(无则忽略)</h1><p>新建目录,证书放置/opt/nginx/cert下</p>\n<h1 id=\"7-放置静态资源文件服务器\"><a href=\"#7-放置静态资源文件服务器\" class=\"headerlink\" title=\"7. 放置静态资源文件服务器\"></a>7. 放置静态资源文件服务器</h1><p>新建目录/opt/nginx/html，在目录下新建html文件，输入经典Hello World保存</p>\n<h1 id=\"8-运行并验证nginx\"><a href=\"#8-运行并验证nginx\" class=\"headerlink\" title=\"8. 运行并验证nginx\"></a>8. 运行并验证nginx</h1><p>在docker-compose.yml同级目录下运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d <span class=\"comment\"># 以后台进程方式运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker container ls <span class=\"comment\"># 查看容器nginx是否成功运行，若失败 `docker-compose logs` 查看失败原因</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose down <span class=\"comment\"># Stop and remove containers, networks, images, and volumes</span></span><br></pre></td></tr></table></figure>\n<p>浏览器输入 <a href=\"http://www.shenjian.online\">www.shenjian.online</a> , 经典的Hello World再次出现~~~~</p>\n<h1 id=\"9-目录结构相关图片\"><a href=\"#9-目录结构相关图片\" class=\"headerlink\" title=\"9. 目录结构相关图片\"></a>9. 目录结构相关图片</h1><p><img src=\"/2019/06/09/Docker快速部署nginx/dir.png\" alt=\"目录赏析\"></p>\n","categories":["Docker"],"tags":["Docker","Nginx"]},{"title":"Java并发机制底层实现原理之原子操作","url":"http://www.shenjian.online/2019/06/02/Java并发机制底层实现原理之原子操作/","content":"<h1 id=\"1-处理器层实现原子操作\"><a href=\"#1-处理器层实现原子操作\" class=\"headerlink\" title=\"1. 处理器层实现原子操作\"></a>1. 处理器层实现原子操作</h1><h2 id=\"1-1-使用总线锁保证原子性\"><a href=\"#1-1-使用总线锁保证原子性\" class=\"headerlink\" title=\"1.1 使用总线锁保证原子性\"></a>1.1 使用总线锁保证原子性</h2><p> 所谓总线锁,就是使用处理器提供的一个LOCK#信号，当一个处理器在总线上输出该信号时，其他处理器的总线请求将被阻塞，呢么该处理器就可以独占共享内存</p>\n<h2 id=\"1-2-使用缓存锁保证原子性\"><a href=\"#1-2-使用缓存锁保证原子性\" class=\"headerlink\" title=\"1.2 使用缓存锁保证原子性\"></a>1.2 使用缓存锁保证原子性</h2><p> “缓存锁定”指内存区域如果被缓存在缓存行中，并且在Lock操作期间被锁定，呢么执行锁操作回写到内存时，修改内部的内存地址，并允许它的缓存一致性原理保证操作的原子性。</p>\n<p>当操作的数据不能被缓存在处理器内部或数据跨多个缓存行或处理器不支持缓存锁定，则不会使用缓存锁定，而使用总线锁定。</p>\n<p>针对以上两个机制，Inter处理器提供了很多Lock前缀的指令来实现。如位测试和修改指令：BTS、BTR、BTC;交换指令：XADD、CMPXCHG， 被这些指令操作的内存区域会被加锁，导致其他处理器不能访问</p>\n<h1 id=\"2-Java层实现原子操作\"><a href=\"#2-Java层实现原子操作\" class=\"headerlink\" title=\"2. Java层实现原子操作\"></a>2. Java层实现原子操作</h1><p>在Java中可以通过<strong>锁</strong>和<strong>CAS</strong>的方式来实现原子操作</p>\n<h2 id=\"2-1-使用循环CAS来实现原子操作\"><a href=\"#2-1-使用循环CAS来实现原子操作\" class=\"headerlink\" title=\"2.1 使用循环CAS来实现原子操作\"></a>2.1 使用循环CAS来实现原子操作</h2><p>JVM基于CAS操作正式利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路是：循环进行CAS操作直到成功为止</p>\n<h3 id=\"2-1-1-CAS实现原子操作的三大问题\"><a href=\"#2-1-1-CAS实现原子操作的三大问题\" class=\"headerlink\" title=\"2.1.1 CAS实现原子操作的三大问题\"></a>2.1.1 CAS实现原子操作的三大问题</h3><p><strong>ABA问题</strong> 如果一个值原本为A，变成了B，又变成了A，呢么使用CAS进行检查时会发现它的值没有改变。ABA的解决思路是使用版本号。JDK提供AtomicStampedReference解决ABA问题。<br><strong>循环时间长开销大</strong><br><strong>只能保证一个共享变量的原子操作</strong> JDK提供AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里进行CAS操作</p>\n<h2 id=\"2-2-使用锁机制实现原子操作\"><a href=\"#2-2-使用锁机制实现原子操作\" class=\"headerlink\" title=\"2.2 使用锁机制实现原子操作\"></a>2.2 使用锁机制实现原子操作</h2><p>JVM内部实现了偏向锁、轻量级锁、互斥锁。除了偏向锁，JVM实现锁的方式都采用了循环CAS</p>\n<p>ps：术语<br>原子操作： 不可被中断的一个或一系列操作</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"Java并发机制底层实现原理之synchronized","url":"http://www.shenjian.online/2019/06/01/Java并发机制底层实现原理之synchronized/","content":"<h1 id=\"1-synchronized实现同步的基础\"><a href=\"#1-synchronized实现同步的基础\" class=\"headerlink\" title=\"1. synchronized实现同步的基础\"></a>1. synchronized实现同步的基础</h1><p>java中的每一个对象都可以作为锁。具体有3种表现形式：</p>\n<ul>\n<li>普通的同步方法，锁是当前的实例对象</li>\n<li>静态的同步方法，锁是当前类class对象</li>\n<li>同步方法块，锁是synchronized括号里配置的对象</li>\n</ul>\n<h1 id=\"2-synchronized实现原理\"><a href=\"#2-synchronized实现原理\" class=\"headerlink\" title=\"2. synchronized实现原理\"></a>2. synchronized实现原理</h1><p>JVM基于进入和退出Monitor对象来实现方法同步与代码块同步，代码块同步是使用monitorenter和monitorexit指令来实现，而方法同步实现方式未在JVM规范中指出，但是也可以使用这两个指令实现。</p>\n<h1 id=\"3-synchronized锁存放位置\"><a href=\"#3-synchronized锁存放位置\" class=\"headerlink\" title=\"3. synchronized锁存放位置\"></a>3. synchronized锁存放位置</h1><p>synchronized锁存放在Java对象头里。如果对象是数组类型，则虚拟机用3个字宽(Word)存储对象头，如果对象是非数组类型，则用2个字宽存储对象头。32位虚拟机中，1字宽为4字节，即32bit<br>Java对象头里的Mark Word里默认存放的是HashCode、分代年龄和锁标记位。</p>\n<h1 id=\"4-synchronized锁的升级与对比\"><a href=\"#4-synchronized锁的升级与对比\" class=\"headerlink\" title=\"4. synchronized锁的升级与对比\"></a>4. synchronized锁的升级与对比</h1><p>在JDK1.6及以上，锁共有4中状态，级别从低到高一次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，这几个状态会根据竞争情况逐步升级，但不能降级(目的是为了提高获取锁和释放锁的效率)。</p>\n<h2 id=\"4-1-偏向锁\"><a href=\"#4-1-偏向锁\" class=\"headerlink\" title=\"4.1 偏向锁\"></a>4.1 偏向锁</h2><ul>\n<li><p>加锁： 把对象头与栈帧的锁记录里存储锁偏向的线程ID。以后进入时测试对象头Mark Word中是否存储了指向当前线程的偏向锁，如果成功，可重入，无需CAS操作进行加锁和释放锁；如果失败，则测试Mark Word中偏向锁的标识是否为1(表明当前是偏向锁)：如果没有，则使用CAS竞争，否则，使用CAS将对象头的偏向锁指向当前线程</p>\n</li>\n<li><p>解锁：需要等待全局安全点(在这个时间点上没有执行的字节码)。首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否存活，若否，则将对象头设为无锁状态；否则，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和Mark Word要么重新偏向其他线程，要么恢复为无锁或者标记为不适合为偏向锁，最后唤醒暂停的线程。</p>\n</li>\n<li><p>关闭： JVM参数设置： -XX:BiasedLockingStartupDelay=0 关闭延迟激活偏向锁 -XX UserBiasedLocking=false 关闭偏向锁</p>\n</li>\n</ul>\n<h2 id=\"4-2-轻量级锁\"><a href=\"#4-2-轻量级锁\" class=\"headerlink\" title=\"4.2 轻量级锁\"></a>4.2 轻量级锁</h2><ul>\n<li>加锁： 线程在执行同步代码块之前，会在当前线程栈帧中创建用于存储锁记录的空间，并将Mark Word复制到所记录中，并使用CAS尝试将Mark Word替换为指向所记录的指针。如果成功，当前线程获得锁，如果失败，则自旋获取锁。</li>\n<li>解锁： 使用CAS将Displaced Mark Word替换回对象头，若失败，则会膨胀为重量级锁</li>\n</ul>\n<h2 id=\"4-3-锁优缺点对比\"><a href=\"#4-3-锁优缺点对比\" class=\"headerlink\" title=\"4.3 锁优缺点对比\"></a>4.3 锁优缺点对比</h2><table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>偏向锁</td>\n<td>加锁和解锁不需要额外的消耗</td>\n<td>如果存在竞争，会带来额外解锁消耗</td>\n<td>适用一个线程访问同步块场景</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>竞争的线程不会阻塞，提高程序响应速度</td>\n<td>始终得不到锁竞争的线程，自旋消耗CPU</td>\n<td>追求响应时间，同步块响应非常快</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程竞争不使用自旋，不会消耗CPU</td>\n<td>线程阻塞，响应时间慢</td>\n<td>追求吞吐量，同步块执行速度较长</td>\n</tr>\n</tbody>\n</table>\n","categories":["多线程"],"tags":["多线程"]},{"title":"IDEA常用快捷键","url":"http://www.shenjian.online/2019/05/29/IDEA常用快捷键/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + F12  <span class=\"comment\"># 类方法查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl + H <span class=\"comment\"># 类关系查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">Shift + F6 <span class=\"comment\"># 类重命名</span></span><br><span class=\"line\"></span><br><span class=\"line\">Alt + Enter <span class=\"comment\"># 导入包依赖</span></span><br></pre></td></tr></table></figure>\n","categories":["工具"],"tags":["工具"]},{"title":"ThreadPoolExecutor及ThreadFactory","url":"http://www.shenjian.online/2019/05/23/ThreadPoolExecutor及ThreadFactory/","content":"<h1 id=\"1-ThreadPoolExecutor构造参数详解\"><a href=\"#1-ThreadPoolExecutor构造参数详解\" class=\"headerlink\" title=\"1. ThreadPoolExecutor构造参数详解\"></a>1. ThreadPoolExecutor构造参数详解</h1><h2 id=\"1-1-corePoolSize与maximumPoolSize\"><a href=\"#1-1-corePoolSize与maximumPoolSize\" class=\"headerlink\" title=\"1.1 corePoolSize与maximumPoolSize\"></a>1.1 corePoolSize与maximumPoolSize</h2><p>ThreadPoolExecutor将根据corePoolSize与maximumPoolSize自动调整线程池的大小。当新任务在方法execute(java.lang.Runnable)中提交时<strong>如果池中当前运行线程数量少于corePoolSize,则新创建线程来处理请求，即使其他线程是空闲的;如果池中当前运行线程数量多于corePoolSize而小于maximumPoolSize,则仅当队列满时才新创建线程</strong>(由此可得，若队列无界，maximumPoolSize无效，池中线程数始终为corePoolSize；若队列有界，maximumPoolSize无界，则允许任意数量的并发)</p>\n<h2 id=\"1-2-keepAliveTime与timeUnit\"><a href=\"#1-2-keepAliveTime与timeUnit\" class=\"headerlink\" title=\"1.2 keepAliveTime与timeUnit\"></a>1.2 keepAliveTime与timeUnit</h2><p>池中线程数多于corePoolSize时，线程空闲时间超过以timeUnit为单位的时间keepAliveTime后，则终止，避免资源浪费。默认情况下，保持活动资源策略不应用于corePoolSizeThreads,但是只要keepAliveTime不为0，可以通过allowsCoreThreadTimeOut(boolean)方法将此超时策略应用于核心线程。</p>\n<h2 id=\"1-3-workQueue\"><a href=\"#1-3-workQueue\" class=\"headerlink\" title=\"1.3 workQueue\"></a>1.3 workQueue</h2><p>所有BlockingQueue都可用于传输与保持提交的任务，可以用此队列与池进行交互(以下称交互规则)：</p>\n<ul>\n<li>如果池中当前运行线程数少于corePoolSize,则Executor首选创建线程处理任务，而非将任务入队列</li>\n<li>如果池中当前运行线程数等于或多余corePoolSize,则Executor首选将任务入队列，而非田创建线程处理任务</li>\n<li>如果队列已满且线程数小于maximumPoolSize,则创建线程处理任务，除非线程数超过maximumPoolSize,则新任务被拒绝</li>\n</ul>\n<p>任务排队有三种策略：</p>\n<ul>\n<li>直接提交 工作队列的默认选项 SynchronousQueue，它将任务直接提交给线程而不是加入队列，如果不存在可以立即运行的线程则创建线程，故通常要求无界maximumPoolSizes以避免拒绝新任务。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。</li>\n<li>无界队列 如不具有预定义容量的 LinkedBlockingQueue,由于无界加对队列与池的交互规则，故池中当前运行线程数始终不会超过corePoolSize。在Web页处理器中，此策略可处理瞬态突发情况</li>\n<li>有界队列 如ArrayBlockingQueue有助于防止资源耗尽</li>\n</ul>\n<h2 id=\"1-4-threadFactory\"><a href=\"#1-4-threadFactory\" class=\"headerlink\" title=\"1.4 threadFactory\"></a>1.4 threadFactory</h2><p>使用ThreadFactory创建新线程。如果没有另外说明，则在同一个ThreadGroup中使用Executors.defaultThreadFactory创建线程，并且这些线程拥有相同的NORM_PRIORITY优先级和非守护进程状态。通过提供不同的ThreadGroup,可以改变线程的名称、线程组、优先级、守护进程状态。如果newThread返回null时ThreadFactory未能成功创建线程，则程序继续执行，但不能执行任何任务。</p>\n<h2 id=\"1-5-handler\"><a href=\"#1-5-handler\" class=\"headerlink\" title=\"1.5 handler\"></a>1.5 handler</h2><ul>\n<li>当有界队列已满且池中运行线程数等于maximumPoolSize</li>\n<li>Executor关闭<br>以上两种情况发生后，对于新任务，ThreadPoolExecutor.exceute方法将执行RejectedExecutionHandler的rejectedExecution(Runnable, ThreadPoolExecutor),有以下四种饱和策略：</li>\n</ul>\n<p><strong>中止策略(ThreadPoolExecutor.AbortPolicy):</strong> 该策略抛出未检查的RejectedExecutionException<br><strong>调用者运行策略(ThreadPoolExecutor.CallerRunsPolicy):</strong> 该策略不会抛弃任务，也不会抛出异常，而是把任务回退给调用者执行<br><strong>抛弃策略(ThreadPoolExecutor.DiscardPolicy):</strong> 抛弃任务不执行<br><strong>抛弃最旧策略(ThreadPoolExecutor.DiscardOldestPolicy):</strong> 抛弃队列中下一个被执行的任务。 由于优先队列下一任务为优先级高者，故不可与该策略结合使用</p>\n<h1 id=\"2-自定义ThreadFactory\"><a href=\"#2-自定义ThreadFactory\" class=\"headerlink\" title=\"2. 自定义ThreadFactory\"></a>2. 自定义ThreadFactory</h1><p><strong>在使用ThreadPoolExecutor的时候，建议编写自己的ThreadFactory,这样在使用jstack工具查看内存中线程时，可很容易看出线程所属线程池，这对于在生产环境中解决死锁问题非常有帮助</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NamedThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger poolId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadGroup threadGroup;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger threadId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String threadNamePrefix = <span class=\"string\">\"NamedThreadPool\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NamedThreadFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        poolId = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">        threadGroup = <span class=\"keyword\">new</span> ThreadGroup(<span class=\"string\">\"NamedThreadFactory\"</span>);</span><br><span class=\"line\">        threadId = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">        String name = threadNamePrefix + <span class=\"string\">\"-pool-\"</span> + poolId + <span class=\"string\">\"-thread-\"</span> + threadId.getAndIncrement();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(threadGroup, r, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> corePoolSize = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maximumPoolSize = <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> keepAliveTime = <span class=\"number\">1000</span>;</span><br><span class=\"line\">        ThreadPoolExecutor threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize,</span><br><span class=\"line\">                keepAliveTime, TimeUnit.MILLISECONDS, <span class=\"keyword\">new</span> SynchronousQueue&lt;&gt;());</span><br><span class=\"line\">        threadPoolExecutor.setThreadFactory(<span class=\"keyword\">new</span> NamedThreadFactory());</span><br><span class=\"line\"></span><br><span class=\"line\">        Lock lockOne = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">        Lock lockTwo = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPoolExecutor.execute(() -&gt; &#123;</span><br><span class=\"line\">            lockOne.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lockTwo.lock();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadPoolExecutor.execute(() -&gt; &#123;</span><br><span class=\"line\">            lockTwo.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lockOne.lock();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先jps查看所有进程pid，jstack打印对应pid堆栈信息 jstack 1156 &gt; /opt/temp/dump，结果如下：</p>\n<p><img src=\"/2019/05/23/ThreadPoolExecutor及ThreadFactory/死锁示例.png\" alt=\"死锁示例\"></p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"区块链架构","url":"http://www.shenjian.online/2019/05/19/区块链架构/","content":"<h1 id=\"1-区块链机构与传统IT架构区别\"><a href=\"#1-区块链机构与传统IT架构区别\" class=\"headerlink\" title=\"1. 区块链机构与传统IT架构区别\"></a>1. 区块链机构与传统IT架构区别</h1><p>去中心化</p>\n<h1 id=\"2-区块链架构模型\"><a href=\"#2-区块链架构模型\" class=\"headerlink\" title=\"2. 区块链架构模型\"></a>2. 区块链架构模型</h1><h2 id=\"2-1-区块链系统的共性\"><a href=\"#2-1-区块链系统的共性\" class=\"headerlink\" title=\"2.1 区块链系统的共性\"></a>2.1 区块链系统的共性</h2><p>(1) <strong>共识机制</strong> 我看到的就是你看到的，各个分布节点使用相同的共识算法可以得到对建模对象相同的认识，也可以确信其他人的认识和自己是一致的。<br>(2) <strong>状态可验证性</strong> 系统当前所有的状态都是确定性的，任何币的状态都可以被各自既定的确定性交易或流程规则所验证。<br>(3) <strong>唯一性</strong> 任何状态资产的消费只能发生一次，即区块链的防“双花”的安全性。<br>(4) <strong>不可篡改</strong> 密码学方式组织的区块链确保了已经提交到区块中的交易不可更改，否则会导致全盘修改。<br>(5) <strong>基于公/私钥的验证</strong> 区块链完全采用基于密码学的公/私钥方式通过签名来认证个人身份，所有的资产消费和验证也都围绕公/私钥进行。<br>(6) <strong>区块链治理</strong></p>\n<h2 id=\"2-2-区块链系统的差异性\"><a href=\"#2-2-区块链系统的差异性\" class=\"headerlink\" title=\"2.2 区块链系统的差异性\"></a>2.2 区块链系统的差异性</h2><p>(1) 共识主体不同 (2) 建模对象范围不同 (3) 建模对象操纵能力不同<br>(4) 法律法规支持程度不同 (5) 隐私和匿名性不同 (6) 交易延迟确认的不同<br>(7) 性能和可扩展性不同</p>\n<h1 id=\"3-区块链参考模型\"><a href=\"#3-区块链参考模型\" class=\"headerlink\" title=\"3. 区块链参考模型\"></a>3. 区块链参考模型</h1><h2 id=\"3-1-区块链高阶架构模型\"><a href=\"#3-1-区块链高阶架构模型\" class=\"headerlink\" title=\"3.1 区块链高阶架构模型\"></a>3.1 区块链高阶架构模型</h2><p>面向链合约服务的高阶层次化架构包括三大部分： 业务合约和账本、区块链平台服务、UI界面/API接口</p>\n<p>(1) <strong>业务合约和账本</strong> 整个区块链生态系统的核心就是要能支持各种契约，即业务合约，并在相关参与者间共享交易账本。<br>其分为合约流程、合约服务、合约代码、价值共享账本四大模块。<br>(2) <strong>区块链平台服务</strong> 区块链平台服务提供所有区块链平台层面的公共服务，平台服务同具体的业务无关，是可以为所有业务合约所共享的服务。各种平台服务可以是链上的，也可以是链外的。<br>区块链平台服务主要包括合约合规、安全控制、链上共识、链服务管理、治理(链上、链外)、开发运维。<br>(3) <strong>UI界面/API接口</strong><br>这部分是提供整个区块链服务对外的交互接口，主要包括个性化任务列表、个性化DApp、IoT协议适配和价值锚定、人工智能代理、开放API、业务合约浏览器、区块链浏览器、资产浏览器</p>\n<h2 id=\"3-2-区块链跨链本质与架构模型\"><a href=\"#3-2-区块链跨链本质与架构模型\" class=\"headerlink\" title=\"3.2 区块链跨链本质与架构模型\"></a>3.2 区块链跨链本质与架构模型</h2><p><strong>跨链的本质是价值等价交换</strong></p>\n<h2 id=\"3-3-区块链部署模型\"><a href=\"#3-3-区块链部署模型\" class=\"headerlink\" title=\"3.3 区块链部署模型\"></a>3.3 区块链部署模型</h2><p><strong>服务化、容器化</strong></p>\n<h1 id=\"4-区块链数据模型\"><a href=\"#4-区块链数据模型\" class=\"headerlink\" title=\"4. 区块链数据模型\"></a>4. 区块链数据模型</h1><p>数据模型的设计关乎整个区块链的并发性能</p>\n<p>(1) <strong>账户模型</strong> 账户模型对于建模数据的表达最直接，也形同于传统的“应用+数据库”的结构。账户模型将一个或多个账户实例的所有状态以key-value的形式组织起来，形成一定的存储结构，并以此为基础构建全局状态哈希树。以太坊记录各个账户状态就是采用账户模型。<br>(2) <strong>UTXO模型</strong> UTXO模型以比特币的数据模型为代表，只不过为花费交易状态输出的只有一个值：代币金额，代币金额总数在输入和输出上保持一致<br>UTXO的最大特色在于交易的并行处理能力：属于同一个转出账户的所有交易可以并行执行，只要童话一个交易不出现在同一个区块当中。另一个特点是UTXO数据库不会随着时间而膨胀，新的交易未花输出同时伴随着旧的交易未花输出的消费，所以基本上可以保持相对稳定的状态。<br>(3) <strong>混合模型</strong> 账户模型和UTXO模型可能会被结合起来来应用。以太坊的扩容方案–分区就是在账户模型的基础上使用UTXO模型进行跨分片的通信。</p>\n<h1 id=\"5-区块链能力模型\"><a href=\"#5-区块链能力模型\" class=\"headerlink\" title=\"5. 区块链能力模型\"></a>5. 区块链能力模型</h1><p>(1) 建模能力和业务自由度 (2) 共识主体范围 (3) 法律法规支持度<br>(4) 链安全(博弈经济) (5) 应用隔离 (6) 权限控制<br>(7) 易用性 (8)性能(吞吐量和确认时间) (9) 链治理(自动化程度)<br>(10) 跨链机制 (11) 隐私保护和匿名性</p>\n","categories":["区块链"],"tags":["区块链"]},{"title":"Markdown常用命令","url":"http://www.shenjian.online/2019/05/19/Markdown常用命令/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"built_in\">wait</span>/nofity运行过程](<span class=\"built_in\">wait</span>-notify使用详解/WaitNotify运行过程.png) <span class=\"comment\"># 插入图片 [图片显示标识](图片所在包名/图片名)</span></span><br><span class=\"line\"></span><br><span class=\"line\">[沈健的技术博客](https://shenjian.online) <span class=\"comment\"># 插入链接</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入链接</span></span><br></pre></td></tr></table></figure>\n","categories":["工具"],"tags":["工具"]},{"title":"Git常用命令","url":"http://www.shenjian.online/2019/05/18/Git常用命令/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在hexo目录下新建本地仓库(当前处于master分支)</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> D:/Project/java/hexo/.git/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为了便于管理，新建分支source,并从master切换至source分支</span></span><br><span class=\"line\"><span class=\"comment\">## 此步骤为 git branch source(新建分支) git checkout source(切换分支) 的合并</span></span><br><span class=\"line\">$ git checkout -b <span class=\"built_in\">source</span></span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'source'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下所有文件加入,以便commit</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">warning: LF will be replaced by CRLF <span class=\"keyword\">in</span> package.json.</span><br><span class=\"line\">The file will have its original line endings <span class=\"keyword\">in</span> your working directory.</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有的改变至本地仓库</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">'保存博客原文及配置至source分支'</span></span><br><span class=\"line\">[<span class=\"built_in\">source</span> (root-commit) 007ae29] 保存博客原文及配置至<span class=\"built_in\">source</span>分支</span><br><span class=\"line\"> 71 files changed, 7654 insertions(+)</span><br><span class=\"line\"> create mode 100644 .gitignore</span><br><span class=\"line\"> create mode 100644 1.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看本地仓库相关状态</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch <span class=\"built_in\">source</span></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\">  (commit or discard the untracked or modified content <span class=\"keyword\">in</span> submodules)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   <span class=\"string\">\"source/_posts/Git\\345\\270\\270\\347\\224\\250\\345\\221\\275\\344\\273\\244.md\"</span></span><br><span class=\"line\">        modified:   themes/fexo (modified content, untracked content)</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有分支(包括本地分支与远程相关联分支) * 号代表当前所有分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地仓库与远程仓库相关联，以便push(origin为关联时设置的名称,可任意取值)</span></span><br><span class=\"line\">$ git remote add origin git@github.com:SJshenjian/SJshenjian.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看关联好的远程分支状态</span></span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 与远程关联好后，没有执行 git pull，不会看到远程具体分支，如下结果所示(有时不需要pull,仅仅需要push)</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将本地分支source提交至远程仓库source分支</span></span><br><span class=\"line\"><span class=\"comment\">## source:source 第一个source为本地分支 第二个source为远程分支，远程不存在该分支则自动新建</span></span><br><span class=\"line\">$ git push origin <span class=\"built_in\">source</span>:<span class=\"built_in\">source</span></span><br><span class=\"line\">Counting objects: 88, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (78/78), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (88/88), 890.55 KiB | 1.01 MiB/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 88 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote:</span><br><span class=\"line\">remote: Create a pull request <span class=\"keyword\">for</span> <span class=\"string\">'source'</span> on GitHub by visiting:</span><br><span class=\"line\">remote:      https://github.com/SJshenjian/SJshenjian.github.io/pull/new/<span class=\"built_in\">source</span></span><br><span class=\"line\">remote:</span><br><span class=\"line\">To github.com:SJshenjian/SJshenjian.github.io.git</span><br><span class=\"line\"> * [new branch]      <span class=\"built_in\">source</span> -&gt; <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看所有分支状态(仅显示刚才新push的分支，说明远程分支仅在我们pull或者push后才可看到,且仅能看到相关联的，如远程master不涉及，就没有看到)</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\">* <span class=\"built_in\">source</span></span><br><span class=\"line\">  remotes/origin/<span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除误提交的远程文件夹(不删除本地)</span></span><br><span class=\"line\">$ git rm -r --cached 1</span><br><span class=\"line\">rm <span class=\"string\">'1/1.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m <span class=\"string\">'删除错误提交'</span></span><br><span class=\"line\">[<span class=\"built_in\">source</span> 5726033] 删除错误提交</span><br><span class=\"line\"> 1 file changed, 1 deletion(-)</span><br><span class=\"line\"> delete mode 100644 1/1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin <span class=\"built_in\">source</span>:<span class=\"built_in\">source</span></span><br><span class=\"line\">Counting objects: 2, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (2/2), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (2/2), 244 bytes | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (1/1), completed with 1 <span class=\"built_in\">local</span> object.</span><br><span class=\"line\">To github.com:SJshenjian/SJshenjian.github.io.git</span><br><span class=\"line\">   007ae29..5726033  <span class=\"built_in\">source</span> -&gt; <span class=\"built_in\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程分支(为了测试，新建一个分支test1)</span></span><br><span class=\"line\">$ git push origin <span class=\"built_in\">source</span>:test1</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin -d test1</span><br><span class=\"line\">To github.com:SJshenjian/SJshenjian.github.io.git</span><br><span class=\"line\"> - [deleted]         test1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略ssl证书</span></span><br><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n","categories":["工具"],"tags":["Git"]},{"title":"区块链技术模型","url":"http://www.shenjian.online/2019/04/23/区块链技术模型/","content":"<p><img src=\"/2019/04/23/区块链技术模型/区块链技术模型.png\" alt=\"区块链技术模型\"></p>\n<p>如图所示，区块链技术模型包括9大部分，其中7层基础技术层和2各贯穿整个7层的共用技术。</p>\n<h2 id=\"1-数据存储层\"><a href=\"#1-数据存储层\" class=\"headerlink\" title=\"1. 数据存储层\"></a>1. 数据存储层</h2><p>区块链就像是一个个分布式账本，账本的账册通过链条链在一起，构成一连串的账本链(即区块链)。账本中的数据通过分布式方式(分布式文件系统或者分布式数据库)存储在不同节点。数据存储层主要包括<strong>数据区块</strong>的逻辑组织方式和使用<strong>链式结构</strong>与<strong>Markle树</strong>进行有效存储</p>\n<h3 id=\"1-1-数据区块\"><a href=\"#1-1-数据区块\" class=\"headerlink\" title=\"1.1 数据区块\"></a>1.1 数据区块</h3><p><img src=\"/2019/04/23/区块链技术模型/比特币区块基本结构.png\" alt=\"比特币区块基本结构\"></p>\n<p>数据区块由区块头和区块体两部分组成。<br>区块头主要包括区块版本号、前一个区块的哈希值、用于验证区块交易的一个总的哈希Merkle树根、时间戳、难度目标及一个用于证明工作量难度的随机数。<br>区块体主要包含该区块的所有交易信息和所用交易信息的Merkle数(树根除外，树根存在区块头内)</p>\n<h3 id=\"1-2-链式结构\"><a href=\"#1-2-链式结构\" class=\"headerlink\" title=\"1.2 链式结构\"></a>1.2 链式结构</h3><p>区块链应用的所有区块之间按照时间先后顺序链接成一个完整的链条。新创建的区块链接在最后一个区块后面。该单向链条被每个节点认可，有人想篡改几乎不可能，每一笔交易都可以向前溯源，找到其历史记录，具有安全和可验证性。</p>\n<h3 id=\"1-3-Merkle树及其基本原理\"><a href=\"#1-3-Merkle树及其基本原理\" class=\"headerlink\" title=\"1.3 Merkle树及其基本原理\"></a>1.3 Merkle树及其基本原理</h3><p>Merkle树是一种典型的二叉树或多叉树，他包含根节点、中间节点、叶子节点。根节点将保存在区块头中。根节点、中间节点、叶子节点是一组哈希值，叶子节点存储了该区块内的所有交易的初始哈希值，一个交易对应一个叶子节点。叶子节点两两哈希，得到上一层中间节点的哈希值，依次类推，得到根节点的哈希值。 只要有任一叶子节点的数据被修改了，则根节点哈希值一定会发生改变。因此，要判断区块体交易数据是否有修改，只需验证Merkle树的根节点即可。</p>\n<h2 id=\"2-网络通信层\"><a href=\"#2-网络通信层\" class=\"headerlink\" title=\"2. 网络通信层\"></a>2. 网络通信层</h2><p>区块链运行在去中心化的分布式网络，一般采用P2P的组网方式。</p>\n<h3 id=\"2-1-P2P网络\"><a href=\"#2-1-P2P网络\" class=\"headerlink\" title=\"2.1 P2P网络\"></a>2.1 P2P网络</h3><p>P2P，即peer-to-peer，又称“对等网络”，直接交换来共享计算机资源和服务。</p>\n<h3 id=\"2-2-链接方式\"><a href=\"#2-2-链接方式\" class=\"headerlink\" title=\"2.2 链接方式\"></a>2.2 链接方式</h3><p>当矿工生成一个有效区块后，且被其他矿工确认有效后，就可以链接到当前区块链的末尾，形成新的区块链主链。由于各计算节点以分布式并行计算来争取记账权的，所以可能会出现链条分叉的现象。<br>针对这种情况，区块链协议规定：当主链分叉时，计算节点总是选择链接到<strong>当前工作量证明最大的分支</strong>上，形成更长的新主链。</p>\n<h3 id=\"2-3-传播机制\"><a href=\"#2-3-传播机制\" class=\"headerlink\" title=\"2.3 传播机制\"></a>2.3 传播机制</h3><p>比特币的传播机制可简述如下：<br>1）发起比特币交易的节点将自己新创建的交易数据向全网其他节点进行广播<br>2）所有的节点将收集这些新的交易数据，并打包至自己的预创建的区块中<br>3）为了争夺记账的权力，每个节点努力工作，找到一个工作量的难度证明(PoW)<br>4) 一旦找到了工作量的难度证明，立即对全网进行广播<br>5）其他节点如果认可该工作量难度最大同时所有交易有效，呢么认可该节点创建的区块有效<br>6）一旦新创建的区块得到认可，则其他所有节点都将接受该区块，并将该区块加入自己区块链条的最后一个区块后。</p>\n<h3 id=\"2-4-共识机制\"><a href=\"#2-4-共识机制\" class=\"headerlink\" title=\"2.4 共识机制\"></a>2.4 共识机制</h3><p>比特币系统中区块链技术采用了基于PoW的共识机制。具体做法：在区块计算的最后一步要求解一个随机数，使区块的哈希函数值小于或等于某一目标哈希值，由于哈希函数的随机性和不可逆性，找到随机数的难度会很大。通常目标哈希值由多个前导0的数串构成。设置的前导零越多，目标哈希值设定的越小，找到符合随机数的难度就越大。比特币系统通过调整目标哈希值，通常将区块的时间动态控制在10分钟左右。</p>\n<h3 id=\"2-5-验证机制\"><a href=\"#2-5-验证机制\" class=\"headerlink\" title=\"2.5 验证机制\"></a>2.5 验证机制</h3><p>基于区块链应用事先达成的各种验证协议来进行，比如交易的格式、交易的数据结构、格式的语法结构、输入输出、数字签名的正确性等。</p>\n<h2 id=\"3-数据安全与隐私保护层\"><a href=\"#3-数据安全与隐私保护层\" class=\"headerlink\" title=\"3. 数据安全与隐私保护层\"></a>3. 数据安全与隐私保护层</h2><h3 id=\"3-1-时间戳\"><a href=\"#3-1-时间戳\" class=\"headerlink\" title=\"3.1 时间戳\"></a>3.1 时间戳</h3><p>基于‘去中心’的设计思路，没有一个具体的时间服务器，因此各个节点时间可能不一致。比特币区块链中规定各个节点不超过2小时的偏离。区块链中已各区块生成的顺序作为一个广义的时间戳服务，可以防止双重支付及溯源的作用。</p>\n<h3 id=\"3-2-哈希函数\"><a href=\"#3-2-哈希函数\" class=\"headerlink\" title=\"3.2 哈希函数\"></a>3.2 哈希函数</h3><p>哈希函数把输入数据按一定的算法计算出来，生成固定长度的摘要，即数字摘要。 数字摘要与输入数据一一对应，生成数字摘要容易，逆向计算出输入数据需要天文数字的计算量。</p>\n<h3 id=\"3-3-数据加密\"><a href=\"#3-3-数据加密\" class=\"headerlink\" title=\"3.3 数据加密\"></a>3.3 数据加密</h3><p><strong>对称加密</strong> </p>\n<p><strong>非对称加密</strong></p>\n<p>对称密钥安全传递技术：数字信封（公钥加密，私钥解密）<br>数字签名防抵赖技术：（私钥加密，公钥解密）</p>\n<h3 id=\"3-4-零知识证明\"><a href=\"#3-4-零知识证明\" class=\"headerlink\" title=\"3.4 零知识证明\"></a>3.4 零知识证明</h3><p>零知识证明指证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某一论断是正确的。<br>零知识证明实质上是两方或者多方的协议，即两方或者多方完成一项任务所需采取的一系列步骤。</p>\n<h3 id=\"3-5-区块链安全体系\"><a href=\"#3-5-区块链安全体系\" class=\"headerlink\" title=\"3.5 区块链安全体系\"></a>3.5 区块链安全体系</h3><p>1）物理网络安全 2）区块链数据安全<br>3）区块链应用系统安全 4）区块链密钥安全管理</p>\n<h3 id=\"3-6-隐私保护机制\"><a href=\"#3-6-隐私保护机制\" class=\"headerlink\" title=\"3.6 隐私保护机制\"></a>3.6 隐私保护机制</h3><p>交易信息或区块链<br>1）创建隐私保护算法 最典型 k-匿名算法 2）存储隐私保护算法<br>3）数据挖掘过程中隐私保护算法 4）用户使用过程中隐私保护算法</p>\n<h2 id=\"4-共识层\"><a href=\"#4-共识层\" class=\"headerlink\" title=\"4. 共识层\"></a>4. 共识层</h2><h3 id=\"4-1-工作量证明-PoW\"><a href=\"#4-1-工作量证明-PoW\" class=\"headerlink\" title=\"4.1 工作量证明 PoW\"></a>4.1 工作量证明 PoW</h3><p>Proof of Work基本思想是：通过完成一个有难度的任务来决定区块记账权。 一般来讲，任务的设计是很难计算答案的，但一旦知道答案，却很容易验证，而且难度还可以根据网上的算力来进行动态调整。</p>\n<p>如给定一个字符串‘Hello World’,比特币应用给出的工作量要求是在其后加一个叫girl的数值，将新的字符串进行双重SHA-256哈希计算，如果得到的哈希结果(以16进制的形式表示)是以一定数量的0开头的，则验证通过。 工作量证明相当耗费算力，所以小矿工抱团取暖，加入矿池，按提供的算力进行分配所得</p>\n<h3 id=\"4-2-权益证明-PoS\"><a href=\"#4-2-权益证明-PoS\" class=\"headerlink\" title=\"4.2 权益证明 PoS\"></a>4.2 权益证明 PoS</h3><p>PoS是点点币(PPC)最早采用的一种共识机制。PoS机制主要根据参与者手中持有代币的多少和时间长短(币龄)来决定出块记账权的概率，越多机会越大。<br>与PoW相比，优点能够大幅提高共识效率，降低共识成本，减少算力浪费。<br>缺点安全性比较差，节点可以低成本的分叉作恶，造成PoS公平性先天不足。</p>\n<h3 id=\"4-3-股份授权证明-DPoS\"><a href=\"#4-3-股份授权证明-DPoS\" class=\"headerlink\" title=\"4.3 股份授权证明 DPoS\"></a>4.3 股份授权证明 DPoS</h3><p>由于Pow与Pos的每个节点均可创建区块，这样共识节点多，效率相应差。DPoS是由被社区选举出来的可信账户(受托人)来创建，为了成为正式受托人，需要拉票，获取足够其他用户信任。<br>DPoS提高了传播效率，减少算力消耗，但存在可靠性与安全性隐患。</p>\n<h3 id=\"4-4-拜占庭容错机制\"><a href=\"#4-4-拜占庭容错机制\" class=\"headerlink\" title=\"4.4 拜占庭容错机制\"></a>4.4 拜占庭容错机制</h3><p>在确认共识是，结果并不代表大多数的人的意见。在已知有成员谋反的情况下，忠诚的将军在不受叛徒影响的情况下如何达成一致，拜占庭问题由此产生。</p>\n","categories":["区块链"],"tags":["区块链"]},{"title":"Docker运行常用软件命令","url":"http://www.shenjian.online/2019/04/21/Docker运行常用软件命令/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动(系统为centos7）</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl status docker </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个name为redis的容器并运行redis</span></span><br><span class=\"line\"><span class=\"comment\">## -p 主机端口：容器端口 --name 容器名 -v 挂载目录，规则与端口映射相同 -d 后台启动 redis-server 已配置文件启动redis --appendonly yes 开启redis持久化</span></span><br><span class=\"line\">docker run --name redis -p 6379:6379  -v /usr/<span class=\"built_in\">local</span>/docker/redis.conf:/etc/redis/redis.conf -v /usr/<span class=\"built_in\">local</span>/docker/data:/data -d redis:4.0 redis-server /etc/redis/redis.conf --requirepass password --appendonly yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个name为mysql的容器运行mysql</span></span><br><span class=\"line\"><span class=\"comment\">## -e MYSQL\\_ROOT\\_PASSWORD=123456 设置登录密码为123456</span></span><br><span class=\"line\">docker run --name mysql -p 6379:6379 mysql:5.7 -e MYSQL\\_ROOT\\_PASSWORD=123456 -d </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有容器</span></span><br><span class=\"line\">docekr ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出已经上线的容器</span></span><br><span class=\"line\">docekr container ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出镜像</span></span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将镜像push至远程仓库并在其他机器pull，如docker.io</span></span><br><span class=\"line\">docker login <span class=\"comment\">## 首先登陆</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker tag mongo:4.0 haotu369/mongo:4.0 <span class=\"comment\">## 将本地镜像重命令为带有docker.io账号的形式，如我的账号为haotu369</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker push haotu369/mongo:4.0 <span class=\"comment\">## push至远程仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从远程仓库下载镜像</span></span><br><span class=\"line\">docker pull haotu369/mongo:4.0 <span class=\"comment\">## push至本地</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># springboot jar包运行</span></span><br><span class=\"line\">nohup java -jar XXX.jar --server.port=8081 &amp;</span><br></pre></td></tr></table></figure>","categories":["Docker"],"tags":["Docker"]},{"title":"Centos7下安装docker与docker-compose","url":"http://www.shenjian.online/2019/04/21/Centos7下安装docker与docker-compose/","content":"<h2 id=\"1-Docker-yum方式安装\"><a href=\"#1-Docker-yum方式安装\" class=\"headerlink\" title=\"1. Docker yum方式安装\"></a>1. Docker yum方式安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统版本 </span></span><br><span class=\"line\"><span class=\"comment\">## Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。 建议采用7，可能6.5会有依赖问题</span></span><br><span class=\"line\"><span class=\"comment\">## Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</span></span><br><span class=\"line\">uname -r </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除旧版本</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装必要系统工具</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加软件源信息</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum缓存</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装docker-ce</span></span><br><span class=\"line\">yum install -y docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动docker后台服务</span></span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-docker-compose安装\"><a href=\"#2-docker-compose安装\" class=\"headerlink\" title=\"2. docker-compose安装\"></a>2. docker-compose安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装pip</span></span><br><span class=\"line\">yum install -y epel-release</span><br><span class=\"line\">yum install -y python-pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip --version <span class=\"comment\"># 确认版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip install --upgrade pip <span class=\"comment\"># 更新pip</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip install docker-compose <span class=\"comment\"># 安装docker-compose</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose version <span class=\"comment\"># 查看版本</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置镜像加速器\"><a href=\"#3-配置镜像加速器\" class=\"headerlink\" title=\"3. 配置镜像加速器\"></a>3. 配置镜像加速器</h2><p><a href=\"https://cr.console.aliyun.com/?spm=a2c4g.11186623.2.13.1c2a11beryqiKB\" target=\"_blank\" rel=\"noopener\">容器镜像服务控制台</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># XXXXX 阿里云为你分配的加速地址</span></span><br><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"&lt;your accelerate address&gt;\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>最后<code>chkconfig docker on</code>开机自启动，免得每次虚拟机关闭后手动启动 </p>\n","categories":["Docker"],"tags":["Docker"]},{"title":"互联网下半场的主角-区块链","url":"http://www.shenjian.online/2019/04/21/互联网下半场的主角-区块链/","content":"<p>互联网已经改变了生活的方方面面，带来工作效率大幅提升和生活极大便利，但另一方面，由于互联网依靠中心化机构建立信任，使得互联网日趋中心化，由此带来的数据垄断、隐私侵犯、权益分配不公平等问题也称为制约其发展的瓶颈。<br>“区块链”这一概念起源于2009年初诞生的比特币。其创新的去中心化的信任体系改变了传统互联网依托中心化机构建立和维护信任的机制。2019年达沃斯论坛上，来自全球的顶级区块链企业领袖认为，区块链技术是人类历史上第四次工业革命。</p>\n<h2 id=\"1-当代互联网的局限\"><a href=\"#1-当代互联网的局限\" class=\"headerlink\" title=\"1. 当代互联网的局限\"></a>1. 当代互联网的局限</h2><h3 id=\"1-1-网络信息安全\"><a href=\"#1-1-网络信息安全\" class=\"headerlink\" title=\"1.1 网络信息安全\"></a>1.1 网络信息安全</h3><p>黑客攻击、网上盗窃、网上欺诈、网络病毒等安全问题层出不穷。 在国外，美国大选候选人希拉里的邮件泄露事件直接影响到美国大选的进程。</p>\n<h3 id=\"1-2-数据版权\"><a href=\"#1-2-数据版权\" class=\"headerlink\" title=\"1.2 数据版权\"></a>1.2 数据版权</h3><p>许多网站采用网路爬虫技术自主抓取网络内容，缺乏对他人版权作品的甄别，引发大量侵权案例。</p>\n<h3 id=\"1-3-新的挑战\"><a href=\"#1-3-新的挑战\" class=\"headerlink\" title=\"1.3 新的挑战\"></a>1.3 新的挑战</h3><p>新一代互联网的七点是TCP/IP协议，解决了信息如何低成本、高效率传输的问题，却没有解决信息的信任问题。信任需要中心化的机构来建立和维持。由此派生而来的问题是互联网日趋中心化。中心化的问题是容易形成垄断，特别是数据垄断和隐私侵犯问题，同时也会出现单点故障、易受攻击等安全问题。因此，下一代互联网必须突破的是：<strong>怎样去中心化的建立全球范围内的互联网信任机制；如何让互联网演进到保证信息、价值安全，可靠传输的价值互联网。</strong></p>\n<h2 id=\"2-区块链的演化路径\"><a href=\"#2-区块链的演化路径\" class=\"headerlink\" title=\"2. 区块链的演化路径\"></a>2. 区块链的演化路径</h2><h3 id=\"2-1-区块链和互联网的意义\"><a href=\"#2-1-区块链和互联网的意义\" class=\"headerlink\" title=\"2.1 区块链和互联网的意义\"></a>2.1 区块链和互联网的意义</h3><p>一般意义上，我们把第一代互联网叫做“信息互联网”，BAT本质上都是基于信息互联网提供服务；区块链以其分布式账本结构、去中介化信任机制和不可篡改等技术特性，为“价值互联网”时代的到来提供了最核心的技术支持。</p>\n<h3 id=\"2-2-区块链概念的提出\"><a href=\"#2-2-区块链概念的提出\" class=\"headerlink\" title=\"2.2 区块链概念的提出\"></a>2.2 区块链概念的提出</h3><p>第一阶段：区块链1.0，已数字货币为起点的相关应用，主要包括已比特币为代表的虚拟货币，是区块链技术目前最成功的应用。<br>第二阶段：区块链2.0，由数字资产开启，可以理解为区块链为区块链技术在其他金融领域的运用，如银行间结算、跨境支付、股权登记转让等。<br>第三阶段：区块链3.0，将区块链应用的领域范围扩展到金融行业以外，涵盖备案管理、知识产权存证、物联网、教育应用和政府管理等诸多方面。</p>\n<h3 id=\"2-3-区块链的社会价值和意义\"><a href=\"#2-3-区块链的社会价值和意义\" class=\"headerlink\" title=\"2.3 区块链的社会价值和意义\"></a>2.3 区块链的社会价值和意义</h3><p>1）避免中心化的数据垄断和不公平问题<br>2）区块链可以让资产已信息化方式传输，脱离第三方中心化的背书，并通过区块链的共识机制，防止价值的重复转移(所谓‘双花<br>3）社会经济模式升级 一个全新的世界账本和崭新的共享经济</p>\n<p>PS: 内容参考摘自《区块链核心技术与应用》 邹军等著</p>\n","categories":["区块链"],"tags":["区块链"]},{"title":"Condition接口","url":"http://www.shenjian.online/2019/03/29/Condition接口/","content":"<h2 id=\"1-Condition基本介绍\"><a href=\"#1-Condition基本介绍\" class=\"headerlink\" title=\"1. Condition基本介绍\"></a>1. Condition基本介绍</h2><p>Condition接口主要与Lock接口配合使用，替代Object中监视器方法(wait、notify、notifyAll)</p>\n<p>我们知道，Object类中的wait、notify、notifyAll必须在同步代码块(synchronized)中调用，但我们用ReentrantLock替代了synchronized,因此无法直接调用wait等</p>\n<p>因此，为了实现这个功能，我们必须有另外一种替代机制，这就是Condition的作用</p>\n<h2 id=\"2-Condition接口方法与Object监视器主要方法对比\"><a href=\"#2-Condition接口方法与Object监视器主要方法对比\" class=\"headerlink\" title=\"2. Condition接口方法与Object监视器主要方法对比\"></a>2. Condition接口方法与Object监视器主要方法对比</h2><table>\n<thead>\n<tr>\n<th>Condition</th>\n<th>Object</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>await()</td>\n<td>wait()</td>\n<td>造成当前线程在接到信号或被中断之前一直处于等待状态</td>\n</tr>\n<tr>\n<td>await(long time, TimeUnit unit)</td>\n<td>wait(long timeout)</td>\n<td>造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态</td>\n</tr>\n<tr>\n<td>signal()</td>\n<td>notify()</td>\n<td>唤醒一个等待线程</td>\n</tr>\n<tr>\n<td>signalAll()</td>\n<td>notifyAll()</td>\n<td>唤醒所有等待线程</td>\n</tr>\n</tbody>\n</table>\n<p>类似于wait、notify、notifyAll必须在同步代码块中使用，Condition中的await、signal必须写在Lock.lock()和Lock.unlock()之间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReentrantLock lock=new ReentrantLock();</span><br><span class=\"line\">Condition condition = lock.newCondition();</span><br><span class=\"line\">lock.lock();</span><br><span class=\"line\">/*获取到锁之后才能调用以下方法</span><br><span class=\"line\">condition.await();</span><br><span class=\"line\">condition.signal();</span><br><span class=\"line\">condition.signalAll();*/</span><br><span class=\"line\">lock.unlock();</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Lock与Condition实现生产者消费者\"><a href=\"#3-Lock与Condition实现生产者消费者\" class=\"headerlink\" title=\"3. Lock与Condition实现生产者消费者\"></a>3. Lock与Condition实现生产者消费者</h2><p>类似于wait/notify + synchronized实现生产者消费者，详见 <a href=\"https://sjshenjian.github.io/2019/03/19/wait-notify%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"noopener\">wait/notify使用详解</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Lock + Condition实现生产者消费者</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ProducerConsumerByCondition &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br><span class=\"line\">        int maxSize = 10;</span><br><span class=\"line\">        final Lock lock = new ReentrantLock();</span><br><span class=\"line\">        final Condition notEmpty = lock.newCondition();</span><br><span class=\"line\">        final Condition notFull = lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread producer = new Thread(new ProducerByCondition(queue, maxSize, lock, notEmpty, notFull));</span><br><span class=\"line\">        producer.setName(<span class=\"string\">\"Producer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread consumerOne = new Thread(new ConsumerByCondition(queue, maxSize, lock, notEmpty, notFull));</span><br><span class=\"line\">        consumerOne.setName(<span class=\"string\">\"ConsumerOne\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread consumerTwo = new Thread(new ConsumerByCondition(queue, maxSize, lock, notEmpty, notFull));</span><br><span class=\"line\">        consumerTwo.setName(<span class=\"string\">\"ConsumerTwo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        consumerOne.start();</span><br><span class=\"line\">        consumerTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ProducerByCondition implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    private int maxSize;</span><br><span class=\"line\">    final Lock lock;</span><br><span class=\"line\">    final Condition notEmpty;</span><br><span class=\"line\">    final Condition notFull;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ProducerByCondition(Queue&lt;Integer&gt; queue, int maxSize, Lock lock, Condition notEmpty, Condition notFull) &#123;</span><br><span class=\"line\">        this.queue = queue;</span><br><span class=\"line\">        this.maxSize = maxSize;</span><br><span class=\"line\">        this.lock = lock;</span><br><span class=\"line\">        this.notEmpty = notEmpty;</span><br><span class=\"line\">        this.notFull = notFull;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">run</span></span>() &#123;</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.size() == maxSize) &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Queue is full, Producer \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" waiting\"</span>);</span><br><span class=\"line\">                        notFull.await();</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                int value = random.nextInt();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Producer \"</span> + value);</span><br><span class=\"line\">                queue.add(value);</span><br><span class=\"line\">                notEmpty.signalAll();</span><br><span class=\"line\"></span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConsumerByCondition implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    private int maxSize;</span><br><span class=\"line\">    final Lock lock;</span><br><span class=\"line\">    final Condition notEmpty;</span><br><span class=\"line\">    final Condition notFull;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ConsumerByCondition(Queue&lt;Integer&gt; queue, int maxSize, Lock lock, Condition notEmpty, Condition notFull) &#123;</span><br><span class=\"line\">        this.queue = queue;</span><br><span class=\"line\">        this.maxSize = maxSize;</span><br><span class=\"line\">        this.lock = lock;</span><br><span class=\"line\">        this.notEmpty = notEmpty;</span><br><span class=\"line\">        this.notFull = notFull;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">run</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Queue is empty, Consumer \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" waiting\"</span>);</span><br><span class=\"line\">                        notEmpty.await();</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" consume \"</span> + queue.remove());</span><br><span class=\"line\">                notFull.signalAll();</span><br><span class=\"line\"></span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["多线程"],"tags":["多线程"]},{"title":"Lock接口和ReentrantLock","url":"http://www.shenjian.online/2019/03/29/Lock接口和ReentrantLock/","content":"<h2 id=\"1-Lock接口的特性\"><a href=\"#1-Lock接口的特性\" class=\"headerlink\" title=\"1. Lock接口的特性\"></a>1. Lock接口的特性</h2><p>Lock接口提供的synchronized所不具备的主要特性：</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>尝试非阻塞的获取锁</td>\n<td>当线程尝试获取锁，如果该锁没有被其他线程持有，则成功获取并持有锁</td>\n</tr>\n<tr>\n<td>能被中断的获取锁</td>\n<td>与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，抛出中断异常，同时锁被释放</td>\n</tr>\n<tr>\n<td>超时获取锁</td>\n<td>在指定的时间内获取锁，如果超过了指定时间，则返回</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-Lock接口的API\"><a href=\"#2-Lock接口的API\" class=\"headerlink\" title=\"2. Lock接口的API\"></a>2. Lock接口的API</h2><table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void lock()</td>\n<td>获取锁，调用该方法当前线程会获取锁，当锁获得后，该方法返回</td>\n</tr>\n<tr>\n<td>void lockInterruptibly() throws InterruptedException</td>\n<td>可中断的获取锁，和lock()方法不同之处在于该方法会响应中断，即在锁的获取中可以中断当前线程</td>\n</tr>\n<tr>\n<td>boolean tryLock()</td>\n<td>尝试非阻塞的获取锁，调用该方法后立即返回。如果能够获取到返回true，否则返回false</td>\n</tr>\n<tr>\n<td>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</td>\n<td>超时获取锁，当前线程在以下三种情况下会被返回:当前线程在超时时间内获取了锁 当前线程在超时时间内被中断 超时时间结束，返回false</td>\n</tr>\n<tr>\n<td>void unlock()</td>\n<td>释放锁</td>\n</tr>\n<tr>\n<td>Condition newCondition()</td>\n<td>获取等待通知组件，该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的wait()方法，而调用后，当前线程将释放锁</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-Lock接口类图\"><a href=\"#3-Lock接口类图\" class=\"headerlink\" title=\"3. Lock接口类图\"></a>3. Lock接口类图</h2><p><img src=\"/2019/03/29/Lock接口和ReentrantLock/Lock接口类图.png\" alt=\"Lock接口类图\"></p>\n<h2 id=\"4-Lock接口使用的模板方法\"><a href=\"#4-Lock接口使用的模板方法\" class=\"headerlink\" title=\"4. Lock接口使用的模板方法\"></a>4. Lock接口使用的模板方法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock lock = new ReentrantLock();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        lock.lock();//获取锁</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            lock.unlock();//释放锁</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不要将锁的获取过程写在try块中。因为如果在获取锁(自定义锁的实现)时，发生了异常，异常抛出的同时，也会导致锁的无故释放。</p>\n<h2 id=\"5-ReentrantLock内部组成\"><a href=\"#5-ReentrantLock内部组成\" class=\"headerlink\" title=\"5. ReentrantLock内部组成\"></a>5. ReentrantLock内部组成</h2><p>ReentrantLock支持公平锁(FairSync)与非公平锁(NonfairSync)。new ReentrantLock()，事实上使用的就是非公平锁</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"function\"><span class=\"title\">ReentrantLock</span></span>() &#123;</span><br><span class=\"line\">    sync = new NonfairSync();//非公平锁</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所谓非公平，指的是多个线程同时尝试获取一个锁时，可能会多次被同一个线程获取。实际中公平锁吞吐量比非公平锁小很多，因此我们大多数情况下使用的都是非公平锁。当持有锁的时间较长，或者请求锁的平均时间间隔较长，那么应该使用公平锁。</p>\n<p>ReentrantLock内部维护了一个Sync成员对象，其是FairSync和NonfairSync的抽象父类。表面上看锁的功能是由ReentrantLock实现的，实际是由其内部的私有变量Sync来完成的，根据是否需要是公平锁，给Sync提供不同的具体实现。</p>\n<h2 id=\"6-synchronized和ReentrantLock之间的选择\"><a href=\"#6-synchronized和ReentrantLock之间的选择\" class=\"headerlink\" title=\"6. synchronized和ReentrantLock之间的选择\"></a>6. synchronized和ReentrantLock之间的选择</h2><p>ReentrantLock提供了synchronized以外的功能：定时的锁等待、可中断的锁等待、公平性以及非块结构的加锁；<br>synchronized简单易用，ReentrantLock危险性更高，如果finally块中忘记调用unlock,则埋下定时炸弹；<br>synchronized还有另一优点，在线程转储中能给出哪些调用帧中获取了哪些锁，并能检测和识别发生死锁的线程，而ReentrantLock在JDK1.6后才支持将其注册进一个管理和调试接口，从而使ReentrantLock相关的加锁信息出现在线程转储中；</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"AbstractQueuedSynchronizer简介与使用","url":"http://www.shenjian.online/2019/03/27/AbstractQueuedSynchronizer简介与使用/","content":"<p>AbstractQueuedSynchronizer是并发包中最核心的类，没有之一，它是在LockSupport与Unsafe的基础上实现的。<br>AQS使用的主要方式是继承，我们编写一个类继承AbstractQueuedSynchronizer，重写特定的方法，来实现不同功能的同步组件。</p>\n<h3 id=\"1-同步组件简介\"><a href=\"#1-同步组件简介\" class=\"headerlink\" title=\"1. 同步组件简介\"></a>1. 同步组件简介</h3><p>同步组件从总体可分为两种：</p>\n<p><strong>独占式同步组件(又称独占锁)：</strong> 在任何时刻只有一个线程获得锁，可以执行，其他线程阻塞，进入等待队列。</p>\n<p><strong>共享式同步组件(又称共享锁)：</strong> 共享锁允许多个线程同时执行，通常情况下，共享锁内部维护了多个执行许可，每个线程运行的时候获得一个许可，结束的时候释放一个许可，如果共享锁已经没有了许可，则线程进入等待队列</p>\n<p>注意：可以认为独占锁是共享锁的一个特例，只有一个许可。<br>从这个角度理解的话，独占锁与共享锁都应该提供<strong>获取许可</strong>与<strong>释放许可</strong>的功能。</p>\n<p><strong>获取许可：</strong> 如果线程获取许可成功，则有执行的权力，许可数量-1，获取失败，则阻塞，进入等待队列<br><strong>释放许可：</strong> 拥有执行许可的线程运行结束后，则释放许可，许可数量+1，同时负责唤醒等待队列中的线程</p>\n<p>可以看到，在获取许可和释放许可的过程中，有两个重要的内容需要维护：可用许可的数量、等待队列</p>\n<h3 id=\"2-AQS支持同步组件原理\"><a href=\"#2-AQS支持同步组件原理\" class=\"headerlink\" title=\"2. AQS支持同步组件原理\"></a>2. AQS支持同步组件原理</h3><p>队列同步器AbstractQueuedSynchronizer作为构建同步组件的基础框架。支持独占式的获取同步状态，也支持共享式获取同步状态。ReentryLock、ReentryReadWriteLock、CountDownLatch等都是在AQS的基础上实现的。</p>\n<p>AQS对可用许可数量与等待队列均提供了支持：</p>\n<p><strong>可用许可数量的支持：</strong> 它使用了int类型state变量表示执行许可，初始状态为0，我们限定许可数量为5个，线程获取到一个许可，state+1, 表明已经使用了几个许可<br><strong>等待队列的支持：</strong> 通过内置的FIFO队列来完成线程的排队工作，队列的节点通过静态内部类Node实现</p>\n<p>需要注意的是，AQS对等待队列是完全支持的，也就是对开发者完全屏蔽了阻塞线程入队与出对的操作细节；；而对可用数量(state)提供了部分支持，需要开发者重写特定的方法才能正常工作</p>\n<p>AQS中定义了8个模板方法，对应4个需要开发者覆写的方法：</p>\n<table>\n<thead>\n<tr>\n<th>组件类型</th>\n<th>模板方法</th>\n<th>需要覆写的方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>独占式同步组件</td>\n<td>void acquire(int arg)</td>\n<td>boolean tryAcquire(int arg)</td>\n</tr>\n<tr>\n<td></td>\n<td>void acquireInterruptibly(int arg)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>boolean tryAcquireNanos(int arg, long nanosTimeout)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>boolean release(int arg)</td>\n<td>boolean tryRelease(int arg)</td>\n</tr>\n<tr>\n<td>共享式同步组件</td>\n<td>void acquireShared(int arg)</td>\n<td>boolean tryAcquireShared(int arg)</td>\n</tr>\n<tr>\n<td></td>\n<td>void acquireSharedInterruptibly(int arg)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>boolean tryAcquireSharedNanos(int arg, long nanosTimeout)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>boolean releaseShared(int arg)</td>\n<td>boolean tryReleaseShared(int arg)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-编写同步组件需要注意的地方\"><a href=\"#3-编写同步组件需要注意的地方\" class=\"headerlink\" title=\"3. 编写同步组件需要注意的地方\"></a>3. 编写同步组件需要注意的地方</h3><p>1)使用新的接口和实现包装同步组件：在我们编写一个同步组件的时候，例如我们想实现一个独占锁，假设为Sync，其继承了AQS。只需要在Sync类中覆写tryRelease和tryAcquire即可，但是由于继承AQS的时候，会把tryAcquireShared、tryReleaseShared等共享锁方法也继承下来。而Sync并不会实现这些共享式同步组件的方法，因为Sync只是一个独占锁而已，从业务含义上，因此应该将这些方法屏蔽，从而防止用户误操作。按照最佳实现，屏蔽的方式是定义一个新的接口，假设用Mutex表示，这个接口只定义了独占锁相关方法，再编写一个类MutexImpl实现Mutex接口，而对于同步组件Sync类的操作，都封装在MutexImpl中。</p>\n<p>2)同步组件推荐定义为静态内部类：因为某个同步组件通常是为实现特定的目的而实现，可能只适用于特定的场合。如果某个同步组件不具备通用性，我们应该将其定义为一个私有的静态内部类。结合第一点，我们编写的同步组件Sync应该是MutexImpl的一个私有的静态内部类。</p>\n<h3 id=\"4-基于AQS实现独占锁示例\"><a href=\"#4-基于AQS实现独占锁示例\" class=\"headerlink\" title=\"4. 基于AQS实现独占锁示例\"></a>4. 基于AQS实现独占锁示例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Mutex &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void acquire();</span><br><span class=\"line\"></span><br><span class=\"line\">    void release();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MutexImpl implements Mutex &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Sync sync = new Sync();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">acquire</span></span>() &#123;</span><br><span class=\"line\">        sync.acquire(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">release</span></span>() &#123;</span><br><span class=\"line\">        sync.release(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Sync extends AbstractQueuedSynchronizer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected boolean tryAcquire(int arg) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> super.compareAndSetState(0, 1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected boolean tryRelease(int arg) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> super.compareAndSetState(1, 0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Mutex mutex = new MutexImpl();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">            new Thread(new MutexThread(mutex)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MutexThread implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Mutex mutex;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MutexThread(Mutex mutex) &#123;</span><br><span class=\"line\">        this.mutex = mutex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">run</span></span>() &#123;</span><br><span class=\"line\">        String name = Thread.currentThread().getName();</span><br><span class=\"line\">        mutex.acquire();</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">\"获得锁开始执行\"</span>);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(1000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            mutex.release();</span><br><span class=\"line\">            System.out.println(name + <span class=\"string\">\"释放锁结束运行\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0获得锁开始执行</span><br><span class=\"line\">Thread-1获得锁开始执行</span><br><span class=\"line\">Thread-0释放锁结束运行</span><br><span class=\"line\">Thread-2获得锁开始执行</span><br><span class=\"line\">Thread-1释放锁结束运行</span><br><span class=\"line\">Thread-2释放锁结束运行</span><br><span class=\"line\">Thread-4获得锁开始执行</span><br><span class=\"line\">Thread-4释放锁结束运行</span><br><span class=\"line\">Thread-3获得锁开始执行</span><br><span class=\"line\">Thread-3释放锁结束运行</span><br><span class=\"line\">Thread-5获得锁开始执行</span><br><span class=\"line\">Thread-5释放锁结束运行</span><br><span class=\"line\">Thread-6获得锁开始执行</span><br><span class=\"line\">Thread-6释放锁结束运行</span><br><span class=\"line\">Thread-7获得锁开始执行</span><br><span class=\"line\">Thread-7释放锁结束运行</span><br><span class=\"line\">Thread-8获得锁开始执行</span><br><span class=\"line\">Thread-8释放锁结束运行</span><br><span class=\"line\">Thread-9获得锁开始执行</span><br><span class=\"line\">Thread-9释放锁结束运行</span><br></pre></td></tr></table></figure>","categories":["多线程"],"tags":["多线程","设计模式"]},{"title":"LockSupport简介及使用","url":"http://www.shenjian.online/2019/03/25/LockSupport简介与使用/","content":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h3><p>LockSupport是JDK中比较底层的类，是用来创建锁和其他同步工具类的线程阻塞基本原语。<br>JAVA锁和同步工具类的核心AQS: abstractQueuedSynchronizer就是通过调用LockSupport的park()和unpark()实现阻塞和唤醒的。</p>\n<p>LockSupport很类似于二元信号量(只有一个许可证可使用)，如果这个许可还没有被占用，当前线程获取许可并继续执行；如果许可已经被占用，当前线程阻塞，等待获取许可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LockSupport.park(); // 获取许可</span><br><span class=\"line\">LockSupport.unpark(); // 释放许可</span><br></pre></td></tr></table></figure>\n<p>特别注意：</p>\n<p><strong>许可默认是占用的</strong><br><strong>许可是不可重入的</strong><br><strong>许可是可以响应中断的</strong></p>\n<h3 id=\"2-源码分析\"><a href=\"#2-源码分析\" class=\"headerlink\" title=\"2. 源码分析\"></a>2. 源码分析</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LockSupport &#123;</span><br><span class=\"line\">\tprivate <span class=\"function\"><span class=\"title\">LockSupport</span></span>() &#123;&#125; // Cannot be instantiated.</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void setBlocker(Thread t, Object arg) &#123;</span><br><span class=\"line\">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public static void unpark(Thread thread) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (thread != null)</span><br><span class=\"line\">            UNSAFE.unpark(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void park(Object blocker) &#123;</span><br><span class=\"line\">        Thread t = Thread.currentThread();</span><br><span class=\"line\">        setBlocker(t, blocker);</span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">false</span>, 0L);</span><br><span class=\"line\">        setBlocker(t, null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object getBlocker(Thread t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == null)</span><br><span class=\"line\">            throw new NullPointerException();</span><br><span class=\"line\">        <span class=\"built_in\">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void <span class=\"function\"><span class=\"title\">park</span></span>() &#123;</span><br><span class=\"line\">        UNSAFE.park(<span class=\"literal\">false</span>, 0L);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    private static final long parkBlockerOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; tk = Thread.class;</span><br><span class=\"line\">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (tk.getDeclaredField(<span class=\"string\">\"parkBlocker\"</span>));</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-1-parkBlocker作用\"><a href=\"#2-1-parkBlocker作用\" class=\"headerlink\" title=\"2.1 parkBlocker作用\"></a>2.1 parkBlocker作用</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Thread implements Runnable &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">     * The argument supplied to the current call to</span><br><span class=\"line\">     * java.util.concurrent.locks.LockSupport.park.</span><br><span class=\"line\">     * Set by (private) java.util.concurrent.locks.LockSupport.setBlocker</span><br><span class=\"line\">     * Accessed using java.util.concurrent.locks.LockSupport.getBlocker</span><br><span class=\"line\">     */</span><br><span class=\"line\">    volatile Object parkBlocker;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>parkBlocker是用来记录线程是谁阻塞的，常用于监控与分析线程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">    Thread theadOne = new Thread(() -&gt; &#123;</span><br><span class=\"line\">        LockSupport.park(<span class=\"string\">\"I'm the blocker\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    theadOne.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread.sleep(1000);</span><br><span class=\"line\">    System.out.println(LockSupport.getBlocker(theadOne));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I<span class=\"string\">'m the blocker</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-parkBlockerOffset作用\"><a href=\"#2-2-parkBlockerOffset作用\" class=\"headerlink\" title=\"2.2 parkBlockerOffset作用\"></a>2.2 parkBlockerOffset作用</h5><p><code>parkBlockerOffset = UNSAFE.objectFieldOffset(tk.getDeclaredField(&quot;parkBlocker&quot;));</code> 偏移量就是该Thread中变量parkBlocker在内存中的偏移量。<br>对于<code>getBlocker(Thread t)</code>方法，对于阻塞的线程，不会响应线程内的方法调用，只有通过内存方式<code>UNSAFE.getObjectVolatile(t, parkBlockerOffset)</code>进行获取阻塞对象。</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"Unsafe简介与使用","url":"http://www.shenjian.online/2019/03/25/Unsafe简介与使用/","content":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h3><p>Unsafe类可以操作JAVA内存，操作的是直接内存区，没有办法通过HotSpot的GC进行垃圾回收，需要手动进行回收，所以在使用时要特别注意内存泄漏与内存溢出。</p>\n<p>这是一个平台相关的类，在实际的开发工作中，建议不要使用</p>\n<h3 id=\"2-实例化Unsafe\"><a href=\"#2-实例化Unsafe\" class=\"headerlink\" title=\"2. 实例化Unsafe\"></a>2. 实例化Unsafe</h3><p>Unsafe类提供了一个静态方法getUnsafe()方法获取Unsafe的实例，但是如果直接调用该类，会报出SecurityException异常，因为该类只被JDK信任的类使用。<br>但是我们可以采用反射的方法进行实例化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field field = Unsafe.class.getDeclaredField(<span class=\"string\">\"theUnsafe\"</span>);</span><br><span class=\"line\">field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">Unsafe unsafe = (Unsafe) field.get(null);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-为基本类型变量设值\"><a href=\"#3-为基本类型变量设值\" class=\"headerlink\" title=\"3. 为基本类型变量设值\"></a>3. 为基本类型变量设值</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int index = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class=\"line\">        Field field = Unsafe.class.getDeclaredField(<span class=\"string\">\"theUnsafe\"</span>);</span><br><span class=\"line\">        field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 获取字段在内存中的偏移量</span><br><span class=\"line\">        long offset = unsafe.objectFieldOffset(Test.class.getDeclaredField(<span class=\"string\">\"index\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Test <span class=\"built_in\">test</span> = new Test();</span><br><span class=\"line\"></span><br><span class=\"line\">        unsafe.putInt(<span class=\"built_in\">test</span> ,offset, 100);</span><br><span class=\"line\">        System.out.println(test.index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果： <code>100</code></p>\n<h3 id=\"4-创建构造函数私有的类实例\"><a href=\"#4-创建构造函数私有的类实例\" class=\"headerlink\" title=\"4. 创建构造函数私有的类实例\"></a>4. 创建构造函数私有的类实例</h3><p>通过allocateInstance()方法，可以创建一个实例，即使该类构造函数私有，同时不需要调用初始化代码、构造函数、各种JVM检查等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class=\"line\">        Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class=\"line\">        field.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">        Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class=\"line\"></span><br><span class=\"line\">        Player player = (Player) unsafe.allocateInstance(Player.class);</span><br><span class=\"line\">        System.out.println(player.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">        player.setAge(33);</span><br><span class=\"line\">        System.out.println(player.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Player &#123;</span><br><span class=\"line\">    private int age = 23;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Player() &#123;</span><br><span class=\"line\">        age = 50;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getAge() &#123;</span><br><span class=\"line\">        return age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setAge(int age) &#123;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 // 证明私有方法及构造函数未调用</span><br><span class=\"line\">33</span><br></pre></td></tr></table></figure>","categories":["多线程"],"tags":["多线程"]},{"title":"JVM内存结构、JAVA内存模型、JAVA对象模型","url":"http://www.shenjian.online/2019/03/21/JVM内存结构、JAVA内存模型、JAVA对象模型/","content":"<h3 id=\"1-JVM内存结构\"><a href=\"#1-JVM内存结构\" class=\"headerlink\" title=\"1. JVM内存结构\"></a>1. JVM内存结构</h3><p><img src=\"/2019/03/21/JVM内存结构、JAVA内存模型、JAVA对象模型/JVM内存结构.png\" alt=\"JVM内存结构\"></p>\n<ol>\n<li>不同版本的方法区所处的位置可能不一样，某些JDK版本方法区在堆中实现</li>\n<li>除JVM运行时内存外，还有直接内存，不由JVM管理，利用本地方法库直接在堆外分配内存</li>\n<li>堆与栈的数据划分也不是绝对的，如HotSpot的JIT对对象分配做相应优化</li>\n</ol>\n<h3 id=\"2-JAVA内存模型\"><a href=\"#2-JAVA内存模型\" class=\"headerlink\" title=\"2. JAVA内存模型\"></a>2. JAVA内存模型</h3><p><img src=\"/2019/03/21/JVM内存结构、JAVA内存模型、JAVA对象模型/JAVA内存模型.png\" alt=\"JAVA内存模型\"></p>\n<p>JAVA内存模型是为了解决多线程间通信产生的原子性、可见性、有序性等问题，定义了一些语法集，这些语法集映射到JAVA语言上就是volatile、synchronized等</p>\n<h3 id=\"3-JAVA对象模型\"><a href=\"#3-JAVA对象模型\" class=\"headerlink\" title=\"3. JAVA对象模型\"></a>3. JAVA对象模型</h3><p><img src=\"/2019/03/21/JVM内存结构、JAVA内存模型、JAVA对象模型/JAVA对象模型.jpeg\" alt=\"JAVA对象模型\"></p>\n<p>HotSpot虚拟机中，每一个JAVA类被JVM加载时，JVM会给该类创建一个instanceKlass,保存在方法区，用来在JVM层表示该类。<br>当我们new一个对象时，JVM会创建instanceOopDesc对象。</p>\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h3><p>JVM内存结构，与JVM运行时数据区有关；JAVA内存模型，与JAVA并发编程有关；JAVA对象模型，与JAVA对象在JVM中表现形式有关</p>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"wait/notify使用详解","url":"http://www.shenjian.online/2019/03/19/wait-notify使用详解/","content":"<h3 id=\"1-使用注意事项\"><a href=\"#1-使用注意事项\" class=\"headerlink\" title=\"1. 使用注意事项\"></a>1. 使用注意事项</h3><p>1) wait/notify(All)可用于线程间(线程数量&gt;3)通信</p>\n<p>2) 永远在synchronized方法或对象里使用wait/notify(All),不然JVM报java.lang.IllegalMonitorStateException</p>\n<p>3) 永远在while循环里使用wait，防止其他原因改变先前判断条件</p>\n<p>4) 永远在线程间共享对象(生产者消费者中为缓冲区队列)上使用wait/notify(All)</p>\n<p>5) 多线程间协作，更倾向于使用notifyAll，唤醒在该对象上等待的全部线程</p>\n<h3 id=\"2-实现生产者消费者\"><a href=\"#2-实现生产者消费者\" class=\"headerlink\" title=\"2. 实现生产者消费者\"></a>2. 实现生产者消费者</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSize = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread producer = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Producer(queue, maxSize));</span><br><span class=\"line\">        producer.setName(<span class=\"string\">\"Producer\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread consumerOne = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Consumer(queue, maxSize));</span><br><span class=\"line\">        consumerOne.setName(<span class=\"string\">\"ConsumerOne\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread consumerTwo = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Consumer(queue, maxSize));</span><br><span class=\"line\">        consumerTwo.setName(<span class=\"string\">\"ConsumerTwo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        consumerOne.start();</span><br><span class=\"line\">        consumerTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(Queue&lt;Integer&gt; queue, <span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.size() == maxSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Queue is full, Producer \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" waiting\"</span>);</span><br><span class=\"line\">                        queue.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> value = random.nextInt();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Producer \"</span> + value);</span><br><span class=\"line\">                queue.add(value);</span><br><span class=\"line\">                queue.notifyAll();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(Queue&lt;Integer&gt; queue, <span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// synchronized方法或对象里使用wait/notify(All),不然JVM报java.lang.IllegalMonitorStateException</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// while不可改为if,如果改为if，则可能抛出java.util.NoSuchElementException</span></span><br><span class=\"line\">                <span class=\"comment\">// 当前等待的线程被唤醒时，但是由于其他消费者刚好消费完，使得队列为空</span></span><br><span class=\"line\">                <span class=\"comment\">// 此时如果不重新判断队列为空，代码继续向下执行queue.remove势必抛出java.util.NoSuchElementException</span></span><br><span class=\"line\">                <span class=\"comment\">// 若放入while循环中重新判断条件，若条件不满足，线程则继续挂起，无影响</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Queue is empty, Consumer \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" waiting\"</span>);</span><br><span class=\"line\">                        queue.wait(); <span class=\"comment\">// 在线程间共享对象(生产者消费者中为缓冲区队列)上使用wait/notify(All)</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" consume \"</span> + queue.remove());</span><br><span class=\"line\">                queue.notifyAll(); <span class=\"comment\">// 多线程间协作，更倾向于使用notifyAll，唤醒在该对象上等待的全部线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Queue is empty, Consumer ConsumerOne waiting</span><br><span class=\"line\">Queue is empty, Consumer ConsumerTwo waiting</span><br><span class=\"line\">Producer -1203276467</span><br><span class=\"line\">Producer 626398544</span><br><span class=\"line\">Producer -108152878</span><br><span class=\"line\">Producer -705401944</span><br><span class=\"line\">ConsumerTwo consume -1203276467</span><br><span class=\"line\">ConsumerTwo consume 626398544</span><br><span class=\"line\">ConsumerTwo consume -108152878</span><br><span class=\"line\">ConsumerTwo consume -705401944</span><br><span class=\"line\">Queue is empty, Consumer ConsumerTwo waiting</span><br><span class=\"line\">Queue is empty, Consumer ConsumerOne waiting</span><br><span class=\"line\">Producer -1487489511</span><br><span class=\"line\">Producer 420807949</span><br><span class=\"line\">Producer 428506738</span><br><span class=\"line\">ConsumerOne consume -1487489511</span><br><span class=\"line\">ConsumerTwo consume 420807949</span><br><span class=\"line\">ConsumerTwo consume 428506738</span><br><span class=\"line\">Queue is empty, Consumer ConsumerTwo waiting</span><br><span class=\"line\">Queue is empty, Consumer ConsumerOne waiting</span><br><span class=\"line\">Producer 1411031303</span><br><span class=\"line\">Producer 1426589341</span><br><span class=\"line\">Producer -1307293143</span><br><span class=\"line\">Producer -970522822</span><br><span class=\"line\">Producer -2074755062</span><br><span class=\"line\">ConsumerOne consume 1411031303</span><br><span class=\"line\">ConsumerOne consume 1426589341</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-wait-nofity内部运行细节\"><a href=\"#3-wait-nofity内部运行细节\" class=\"headerlink\" title=\"3. wait/nofity内部运行细节\"></a>3. wait/nofity内部运行细节</h3><p>1) 使用wait()、notify()、notifyAll()时需要先对对象加锁<br>2) 调用wait()方法后，线程状态由RUNNING变为WAITTING,并将当前线程放置到对象的等待队列<br>3) notify()、notifyAll()方法调用后，等待线程依旧不会从wait()返回，需要调用notify()、notify()的线程释放锁后，等待线程才有机会从wait()返回<br>4) notify()、notifyAll()方法将线程从等待队列移到同步队列(前者移1个，后者移全部),被移动的线程由WAITTING变为BLOCKED<br>5) 从wait()方法返回的前提是获得了调用对象的锁[这也是3)中为啥说有机会返回的原因]</p>\n<p><img src=\"/2019/03/19/wait-notify使用详解/WaitNotify运行过程.png\" alt=\"wait/nofity运行过程\"></p>\n<h3 id=\"4-sleep与wait的区别\"><a href=\"#4-sleep与wait的区别\" class=\"headerlink\" title=\"4. sleep与wait的区别\"></a>4. sleep与wait的区别</h3><p>sleep是Thread中定义的方法, wait是Object中定义的方法;</p>\n<p>可以在任何地方调用线程对象的sleep方法，wait方法只能在同步代码块或同步方法中调用；</p>\n<p>调用线程对象的sleep方法后，不释放锁，调用对象的wait方法，释放对象获得的锁</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"线程的状态","url":"http://www.shenjian.online/2019/03/18/线程的状态/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Thread implements Runnable &#123;</span><br><span class=\"line\">\t public enum State &#123;</span><br><span class=\"line\">\t \t NEW,</span><br><span class=\"line\">\t \t RUNNABLE,</span><br><span class=\"line\">\t \t BLOCKED,</span><br><span class=\"line\">\t \t WAITING,</span><br><span class=\"line\">\t \t TIMED_WAITING,</span><br><span class=\"line\">\t \t TERMINATED;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/03/18/线程的状态/线程状态.png\" alt=\"线程状态\"></p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"线程的优先级","url":"http://www.shenjian.online/2019/03/18/线程的优先级/","content":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h3><p>优先级高的线程可能获得比优先级低的线程更多的运行机会，但并不一定起作用，因为线程是<strong>抢占式</strong>。有些操作系统如centos6.5，优先级被忽略</p>\n<p>Java中Tread分为1-10个级别，默认级别为5</p>\n<h3 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"2. 示例\"></a>2. 示例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Temp &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Thread threadOne = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\"第\"</span> + i + <span class=\"string\">\"次执行\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        threadOne.setName(<span class=\"string\">\"Thread-1\"</span>);</span><br><span class=\"line\">        threadOne.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadTwo = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\"第\"</span> + i + <span class=\"string\">\"次执行\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        threadTwo.setName(<span class=\"string\">\"Thread-2\"</span>);</span><br><span class=\"line\">        threadTwo.setPriority(Thread.MIN_PRIORITY);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-2第0次执行</span><br><span class=\"line\">Thread-2第1次执行</span><br><span class=\"line\">Thread-2第2次执行</span><br><span class=\"line\">Thread-2第3次执行</span><br><span class=\"line\">Thread-2第4次执行</span><br><span class=\"line\">Thread-1第0次执行</span><br><span class=\"line\">Thread-2第5次执行</span><br><span class=\"line\">Thread-2第6次执行</span><br><span class=\"line\">Thread-2第7次执行</span><br><span class=\"line\">Thread-2第8次执行</span><br><span class=\"line\">Thread-2第9次执行</span><br><span class=\"line\">Thread-1第1次执行</span><br><span class=\"line\">Thread-1第2次执行</span><br><span class=\"line\">Thread-1第3次执行</span><br><span class=\"line\">Thread-1第4次执行</span><br><span class=\"line\">Thread-1第5次执行</span><br><span class=\"line\">Thread-1第6次执行</span><br><span class=\"line\">Thread-1第7次执行</span><br><span class=\"line\">Thread-1第8次执行</span><br><span class=\"line\">Thread-1第9次执行</span><br></pre></td></tr></table></figure>\n<p>由结果看来，优先级高的Thread-1执行优先级设置优势并没有显现出来。</p>\n<h3 id=\"3-查看\"><a href=\"#3-查看\" class=\"headerlink\" title=\"3. 查看\"></a>3. 查看</h3><p>使用jps + jstack 查看线程的优先级，其中 prio表示JVM设置的优先级，os_prio表示操作系统线程优先级</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\Project\\java\\design-pattern&gt;jps -l</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13360</span><br><span class=\"line\">7728 org.jetbrains.jps.cmdline.Launcher</span><br><span class=\"line\">14164 org.jetbrains.jps.cmdline.Launcher</span><br><span class=\"line\">3396 org.apache.catalina.startup.Bootstrap</span><br><span class=\"line\">9972 sun.tools.jps.Jps</span><br><span class=\"line\">13960 org.jetbrains.kotlin.daemon.KotlinCompileDaemon</span><br><span class=\"line\">2316 Temp</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\Project\\java\\design-pattern&gt;jstack 2316</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Thread-2\"</span> <span class=\"comment\">#13 prio=1 os_prio=-2 tid=0x000000001f236000 nid=0x950 waiting on condition [0x000000001fbbf000]</span></span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class=\"line\">        at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">        at Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$1</span>(Temp.java:20)</span><br><span class=\"line\">        at Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$2</span>/1023892928.run(Unknown Source)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-1\"</span> <span class=\"comment\">#12 prio=10 os_prio=2 tid=0x000000001f1d7800 nid=0x1c20 waiting on condition [0x000000001fabf000]</span></span><br><span class=\"line\">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class=\"line\">        at java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">        at Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:7)</span><br><span class=\"line\">        at Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1078694789.run(Unknown Source)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>","categories":["多线程"],"tags":["多线程"]},{"title":"Thread的join方法","url":"http://www.shenjian.online/2019/03/18/Thread的join方法/","content":"<h2 id=\"1-join的作用\"><a href=\"#1-join的作用\" class=\"headerlink\" title=\"1. join的作用\"></a>1. join的作用</h2><p>Thread类中有一个join方法，其作用是： <strong>在线程A中调用了线程B的join方法，则线程A需要等待线程B执行完毕后才能继续执行</strong></p>\n<h2 id=\"2-使用demo\"><a href=\"#2-使用demo\" class=\"headerlink\" title=\"2. 使用demo\"></a>2. 使用demo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Temp &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        long start = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\"开始执行\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\"开始执行\"</span>);</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(10000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\"结束执行\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(9000);</span><br><span class=\"line\">        long joinStart = System.currentTimeMillis();</span><br><span class=\"line\">        threadOne.join();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\"执行完毕，共花费\"</span> + (System.currentTimeMillis() - start) / 1000 + <span class=\"string\">\"S,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"其中等待threadOne时间为\"</span> + (System.currentTimeMillis() - joinStart) / 1000 + <span class=\"string\">\"S\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main开始执行</span><br><span class=\"line\">Thread-0开始执行</span><br><span class=\"line\">Thread-0结束执行</span><br><span class=\"line\">main执行完毕，共花费10S,其中等待threadOne时间为1S</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用场景\"><a href=\"#3-使用场景\" class=\"headerlink\" title=\"3. 使用场景\"></a>3. 使用场景</h2><p>分库查询。如果某个页面的数据需要来自两个数据库，在A中查询需要9秒，在B中查询需要10秒，如果采用join方式，两个线程进行执行，先执行完的等待后执行完的，则总共执行花费10秒</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"避免活跃性风险","url":"http://www.shenjian.online/2019/03/17/避免活跃性风险/","content":"<h2 id=\"1-死锁\"><a href=\"#1-死锁\" class=\"headerlink\" title=\"1. 死锁\"></a>1. 死锁</h2><h3 id=\"1-1-死锁的必要条件\"><a href=\"#1-1-死锁的必要条件\" class=\"headerlink\" title=\"1.1 死锁的必要条件\"></a>1.1 死锁的必要条件</h3><p><strong>互斥、 等待、 不可剥夺、 循环等待</strong></p>\n<h3 id=\"1-2-死锁的产生方式\"><a href=\"#1-2-死锁的产生方式\" class=\"headerlink\" title=\"1.2 死锁的产生方式\"></a>1.2 死锁的产生方式</h3><h4 id=\"1-2-1-锁顺序死锁\"><a href=\"#1-2-1-锁顺序死锁\" class=\"headerlink\" title=\"1.2.1 锁顺序死锁\"></a>1.2.1 锁顺序死锁</h4><p>线程A先获取了锁a,尝试获取锁b, 此时，线程B获取了锁b,尝试获取锁a, 产生死锁。 </p>\n<h4 id=\"1-2-2-动态的锁顺序死锁\"><a href=\"#1-2-2-动态的锁顺序死锁\" class=\"headerlink\" title=\"1.2.2 动态的锁顺序死锁\"></a>1.2.2 动态的锁顺序死锁</h4><p>线程A: <code>transferMoney(myAccount, yourAccount, 1);</code><br>线程B: <code>transferMoney(yourAccount, myAccount, 1);</code></p>\n<p>由于动态传参的顺序问题，导致死锁，以下代码为死锁案例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Temp &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 开设100个账户每个账户100元</span><br><span class=\"line\">        Account[] accounts = new Account[100];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; accounts.length; i++) &#123;</span><br><span class=\"line\">            accounts[i] = new Temp().new Account();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 20; i++) &#123;</span><br><span class=\"line\">            new Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int j = 0; j &lt; 100000; j++) &#123; // 模拟10万次转转账</span><br><span class=\"line\">                    int fromIndex = random.nextInt(2);</span><br><span class=\"line\">                    int toIndex = random.nextInt(2);</span><br><span class=\"line\">                    System.out.println(fromIndex + <span class=\"string\">\" \"</span> + toIndex);</span><br><span class=\"line\">                    transferMoney(accounts[fromIndex], accounts[toIndex], 1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transferMoney(Account fromAccount, Account toAccount, int amount) &#123;</span><br><span class=\"line\">        synchronized (fromAccount) &#123;</span><br><span class=\"line\">            synchronized (toAccount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fromAccount.money &lt; amount) &#123;</span><br><span class=\"line\">                    throw new IllegalArgumentException(<span class=\"string\">\"账户余额不足\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fromAccount.money -= amount;</span><br><span class=\"line\">                toAccount.money += amount;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Account &#123;</span><br><span class=\"line\">        long money = 100000000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-3-在协作对象之间发生死锁\"><a href=\"#1-2-3-在协作对象之间发生死锁\" class=\"headerlink\" title=\"1.2.3 在协作对象之间发生死锁\"></a>1.2.3 在协作对象之间发生死锁</h4><p>类A同步方法中，存在调用类B中同步方法，类B中同步方法，存在调用类A中同步方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Dispatcher &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void getImage (Taxi taxi) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取车位置图像\"</span>);</span><br><span class=\"line\">        taxi.getLocation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void notifyAvailable(Taxi taxi) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"该车辆已到达\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Taxi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Dispatcher dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Taxi(Dispatcher dispatcher) &#123;</span><br><span class=\"line\">        this.dispatcher = dispatcher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void <span class=\"function\"><span class=\"title\">getLocation</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取位置\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void <span class=\"function\"><span class=\"title\">setLocation</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"设置位置\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            dispatcher.notifyAvailable(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Dispatcher dispatcher = new Dispatcher();</span><br><span class=\"line\">        Taxi taxi = new Taxi(dispatcher);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            taxi.setLocation();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadTwo = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            dispatcher.getImage(taxi);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p><strong>JAVA实例方法同步是同步在该方法的对象实例上，如果每个线程运行的是不同对象实例的同步方法，则没有同步效果</strong></p>\n<h4 id=\"1-2-4-在协作对象之间发生死锁\"><a href=\"#1-2-4-在协作对象之间发生死锁\" class=\"headerlink\" title=\"1.2.4 在协作对象之间发生死锁\"></a>1.2.4 在协作对象之间发生死锁</h4><p>多个线程相互等待锁而不释放自己持有的锁时会发生死锁；当它们在相同的资源集合上等待上也会发生死锁。</p>\n<p>如一个任务需要连接两个数据库，线程A持有数据库D1,需要获取数据库D2,而线程B持有数据库D2，需要获取数据库D1，线程AB因为资源相互等待，产生死锁。</p>\n<h3 id=\"1-3-死锁的避免与诊断\"><a href=\"#1-3-死锁的避免与诊断\" class=\"headerlink\" title=\"1.3 死锁的避免与诊断\"></a>1.3 死锁的避免与诊断</h3><h4 id=\"1-3-1定义锁的顺序\"><a href=\"#1-3-1定义锁的顺序\" class=\"headerlink\" title=\"1.3.1定义锁的顺序\"></a>1.3.1定义锁的顺序</h4><p>针对1.2.2动态的锁顺序发生的死锁，我们可以定义锁的顺序，代码如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Temp &#123;</span><br><span class=\"line\">    \tprivate static final Object object = new Object();</span><br><span class=\"line\">    \t......</span><br><span class=\"line\"></span><br><span class=\"line\">    \tpublic static void transferMoney(Account fromAccount, Account toAccount, int amount) &#123;</span><br><span class=\"line\">        int fromHash = System.identityHashCode(fromAccount);</span><br><span class=\"line\">        int toHash = System.identityHashCode(toAccount);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fromHash &lt; toHash) &#123;</span><br><span class=\"line\">            synchronized (fromAccount) &#123;</span><br><span class=\"line\">                synchronized (toAccount) &#123;</span><br><span class=\"line\">                   ......</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fromHash &gt; toHash) &#123;</span><br><span class=\"line\">            synchronized (toAccount) &#123;</span><br><span class=\"line\">                synchronized (fromAccount) &#123;</span><br><span class=\"line\">                   ......</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            synchronized (object) &#123;</span><br><span class=\"line\">                synchronized (fromAccount) &#123;</span><br><span class=\"line\">                    synchronized (toAccount) &#123;</span><br><span class=\"line\">                       ......</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-2-开放调用\"><a href=\"#1-3-2-开放调用\" class=\"headerlink\" title=\"1.3.2 开放调用\"></a>1.3.2 开放调用</h4><p>如果调用某个方法时不需要持有锁，呢么这种调用被称为开放调用。</p>\n<p>如在1.2.3协作对象之间发生的死锁，可通过开放调用来解决，具体代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Dispatcher &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void getImage (Taxi taxi) &#123;</span><br><span class=\"line\">        synchronized (this) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"获取车位置图像\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        taxi.getLocation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void notifyAvailable(Taxi taxi) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"该车辆已到达\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Taxi &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Dispatcher dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Taxi(Dispatcher dispatcher) &#123;</span><br><span class=\"line\">        this.dispatcher = dispatcher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public synchronized void <span class=\"function\"><span class=\"title\">getLocation</span></span>() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取位置\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">setLocation</span></span>() &#123;</span><br><span class=\"line\">        synchronized (this) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"设置位置\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            dispatcher.notifyAvailable(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Dispatcher dispatcher = new Dispatcher();</span><br><span class=\"line\">        Taxi taxi = new Taxi(dispatcher);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            taxi.setLocation();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadTwo = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            dispatcher.getImage(taxi);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-3-使用支持定时的锁\"><a href=\"#1-3-3-使用支持定时的锁\" class=\"headerlink\" title=\"1.3.3 使用支持定时的锁\"></a>1.3.3 使用支持定时的锁</h4><p>针对1.2.2动态的锁顺序发生的死锁，我们除了可以定义锁的顺序，还可以使用定时的锁，代码如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Temp &#123;</span><br><span class=\"line\">    public static boolean transferMoney(Account fromAccount, Account toAccount, int amount) &#123;</span><br><span class=\"line\">        Lock lock = new ReentrantLock();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lock.tryLock()) &#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fromAccount.money &lt; amount) &#123;</span><br><span class=\"line\">                        throw new IllegalArgumentException(<span class=\"string\">\"账户余额不足\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    fromAccount.money -= amount;</span><br><span class=\"line\">                    toAccount.money += amount;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    lock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-4-通过线程转储来分析死锁\"><a href=\"#1-3-4-通过线程转储来分析死锁\" class=\"headerlink\" title=\"1.3.4 通过线程转储来分析死锁\"></a>1.3.4 通过线程转储来分析死锁</h4><p>UNIX平台按下Ctrl-\\键 ，Window下按Ctrl-Break</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-03-17 12:42:45</span><br><span class=\"line\">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.131-b11 mixed mode):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"DestroyJavaVM\"</span> <span class=\"comment\">#32 prio=5 os_prio=0 tid=0x000000001f99f000 nid=0x650 waiting on condition [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-16\"</span> <span class=\"comment\">#28 prio=5 os_prio=0 tid=0x000000001f98f800 nid=0x38e8 waiting for monitor entry [0x000000002135e000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:38)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe09118&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-13\"</span> <span class=\"comment\">#25 prio=5 os_prio=0 tid=0x000000001f98c800 nid=0x1584 waiting for monitor entry [0x000000002105e000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:38)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe09118&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-11\"</span> <span class=\"comment\">#23 prio=5 os_prio=0 tid=0x000000001f990800 nid=0x3254 waiting for monitor entry [0x0000000020e5f000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:37)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-10\"</span> <span class=\"comment\">#22 prio=5 os_prio=0 tid=0x000000001f98b000 nid=0x36e0 waiting for monitor entry [0x0000000020d5e000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:37)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-5\"</span> <span class=\"comment\">#17 prio=5 os_prio=0 tid=0x000000001f982800 nid=0x3b94 waiting for monitor entry [0x000000002075f000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:37)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-3\"</span> <span class=\"comment\">#15 prio=5 os_prio=0 tid=0x000000001f981000 nid=0x1928 waiting for monitor entry [0x000000002055f000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:37)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Thread-2\"</span> <span class=\"comment\">#14 prio=5 os_prio=0 tid=0x000000001f97c000 nid=0x15f0 waiting for monitor entry [0x000000002045f000]</span></span><br><span class=\"line\">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:37)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Service Thread\"</span> <span class=\"comment\">#11 daemon prio=9 os_prio=0 tid=0x000000001ec51000 nid=0x2844 runnable [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"C1 CompilerThread3\"</span> <span class=\"comment\">#10 daemon prio=9 os_prio=2 tid=0x000000001ebb5800 nid=0xfa4 waiting on condition [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"C2 CompilerThread2\"</span> <span class=\"comment\">#9 daemon prio=9 os_prio=2 tid=0x000000001ebb0800 nid=0x3dbc waiting on condition [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"C2 CompilerThread1\"</span> <span class=\"comment\">#8 daemon prio=9 os_prio=2 tid=0x000000001ebad000 nid=0xa60 waiting on condition [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"C2 CompilerThread0\"</span> <span class=\"comment\">#7 daemon prio=9 os_prio=2 tid=0x000000001eb88000 nid=0x674 waiting on condition [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Monitor Ctrl-Break\"</span> <span class=\"comment\">#6 daemon prio=5 os_prio=0 tid=0x000000001eb89800 nid=0x28ec runnable [0x000000001f33e000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class=\"line\">\tat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class=\"line\">\tat java.net.SocketInputStream.read(SocketInputStream.java:171)</span><br><span class=\"line\">\tat java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class=\"line\">\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)</span><br><span class=\"line\">\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)</span><br><span class=\"line\">\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe30d38&gt; (a java.io.InputStreamReader)</span><br><span class=\"line\">\tat java.io.InputStreamReader.read(InputStreamReader.java:184)</span><br><span class=\"line\">\tat java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class=\"line\">\tat java.io.BufferedReader.readLine(BufferedReader.java:324)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe30d38&gt; (a java.io.InputStreamReader)</span><br><span class=\"line\">\tat java.io.BufferedReader.readLine(BufferedReader.java:389)</span><br><span class=\"line\">\tat com.intellij.rt.execution.application.AppMainV2<span class=\"variable\">$1</span>.run(AppMainV2.java:64)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Attach Listener\"</span> <span class=\"comment\">#5 daemon prio=5 os_prio=2 tid=0x000000001eaf8800 nid=0xc8c runnable [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Signal Dispatcher\"</span> <span class=\"comment\">#4 daemon prio=9 os_prio=2 tid=0x000000001eb53000 nid=0x395c waiting on condition [0x0000000000000000]</span></span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Finalizer\"</span> <span class=\"comment\">#3 daemon prio=8 os_prio=1 tid=0x000000001eae1800 nid=0x3888 in Object.wait() [0x000000001efbf000]</span></span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;0x000000076fe24628&gt; (a java.lang.ref.ReferenceQueue<span class=\"variable\">$Lock</span>)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe24628&gt; (a java.lang.ref.ReferenceQueue<span class=\"variable\">$Lock</span>)</span><br><span class=\"line\">\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)</span><br><span class=\"line\">\tat java.lang.ref.Finalizer<span class=\"variable\">$FinalizerThread</span>.run(Finalizer.java:209)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Reference Handler\"</span> <span class=\"comment\">#2 daemon prio=10 os_prio=2 tid=0x0000000003139800 nid=0x1368 in Object.wait() [0x000000001eabe000]</span></span><br><span class=\"line\">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class=\"line\">\tat java.lang.Object.wait(Native Method)</span><br><span class=\"line\">\t- waiting on &lt;0x000000076fe34300&gt; (a java.lang.ref.Reference<span class=\"variable\">$Lock</span>)</span><br><span class=\"line\">\tat java.lang.Object.wait(Object.java:502)</span><br><span class=\"line\">\tat java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe34300&gt; (a java.lang.ref.Reference<span class=\"variable\">$Lock</span>)</span><br><span class=\"line\">\tat java.lang.ref.Reference<span class=\"variable\">$ReferenceHandler</span>.run(Reference.java:153)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"VM Thread\"</span> os_prio=2 tid=0x000000001cbd9800 nid=0x1aa4 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#0 (ParallelGC)\"</span> os_prio=0 tid=0x0000000003058800 nid=0x3354 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#1 (ParallelGC)\"</span> os_prio=0 tid=0x000000000305a000 nid=0x2a50 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#2 (ParallelGC)\"</span> os_prio=0 tid=0x000000000305c000 nid=0x3690 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#3 (ParallelGC)\"</span> os_prio=0 tid=0x000000000305e800 nid=0x1e48 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#4 (ParallelGC)\"</span> os_prio=0 tid=0x0000000003060800 nid=0xd38 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#5 (ParallelGC)\"</span> os_prio=0 tid=0x0000000003062000 nid=0x1ff8 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#6 (ParallelGC)\"</span> os_prio=0 tid=0x0000000003065000 nid=0x2ef0 runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"GC task thread#7 (ParallelGC)\"</span> os_prio=0 tid=0x0000000003066000 nid=0x1e1c runnable </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"VM Periodic Task Thread\"</span> os_prio=2 tid=0x000000001eca5000 nid=0x38e0 waiting on condition </span><br><span class=\"line\"></span><br><span class=\"line\">JNI global references: 217</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Found one Java-level deadlock:</span><br><span class=\"line\">=============================</span><br><span class=\"line\"><span class=\"string\">\"Thread-16\"</span>:</span><br><span class=\"line\">  waiting to lock monitor 0x000000001cbe35b8 (object 0x000000076fe344e0, a Temp<span class=\"variable\">$Account</span>),</span><br><span class=\"line\">  <span class=\"built_in\">which</span> is held by <span class=\"string\">\"Thread-13\"</span></span><br><span class=\"line\"><span class=\"string\">\"Thread-13\"</span>:</span><br><span class=\"line\">  waiting to lock monitor 0x000000001cbe0bc8 (object 0x000000076fe09118, a Temp<span class=\"variable\">$Account</span>),</span><br><span class=\"line\">  <span class=\"built_in\">which</span> is held by <span class=\"string\">\"Thread-16\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">Java stack information <span class=\"keyword\">for</span> the threads listed above:</span><br><span class=\"line\">===================================================</span><br><span class=\"line\"><span class=\"string\">\"Thread-16\"</span>:</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:38)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe09118&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"><span class=\"string\">\"Thread-13\"</span>:</span><br><span class=\"line\">\tat Temp.transferMoney(Temp.java:38)</span><br><span class=\"line\">\t- waiting to lock &lt;0x000000076fe09118&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\t- locked &lt;0x000000076fe344e0&gt; (a Temp<span class=\"variable\">$Account</span>)</span><br><span class=\"line\">\tat Temp.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(Temp.java:30)</span><br><span class=\"line\">\tat Temp$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/1831932724.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\">Found 1 deadlock.</span><br><span class=\"line\"></span><br><span class=\"line\">Heap</span><br><span class=\"line\"> PSYoungGen      total 76288K, used 6337K [0x000000076b380000, 0x0000000770880000, 0x00000007c0000000)</span><br><span class=\"line\">  eden space 65536K, 7% used [0x000000076b380000,0x000000076b85e7b0,0x000000076f380000)</span><br><span class=\"line\">  from space 10752K, 12% used [0x000000076fe00000,0x000000076ff52040,0x0000000770880000)</span><br><span class=\"line\">  to   space 10752K, 0% used [0x000000076f380000,0x000000076f380000,0x000000076fe00000)</span><br><span class=\"line\"> ParOldGen       total 175104K, used 24K [0x00000006c1a00000, 0x00000006cc500000, 0x000000076b380000)</span><br><span class=\"line\">  object space 175104K, 0% used [0x00000006c1a00000,0x00000006c1a06000,0x00000006cc500000)</span><br><span class=\"line\"> Metaspace       used 4940K, capacity 5052K, committed 5248K, reserved 1056768K</span><br><span class=\"line\">  class space    used 550K, capacity 594K, committed 640K, reserved 1048576K</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-饥饿\"><a href=\"#2-饥饿\" class=\"headerlink\" title=\"2. 饥饿\"></a>2. 饥饿</h2><p>当线程无法访问它所需要的资源并且不能继续执行时，就发生了“饥饿”。引发饥饿的最常见资源就是CPU时钟周期</p>\n<p>如果JAVA应用对线程的优先级使用不当或者采用了无法结束的数据结构（无限循环或者无限制的等待），呢么也可能发生饥饿</p>\n<h2 id=\"3-糟糕的响应性\"><a href=\"#3-糟糕的响应性\" class=\"headerlink\" title=\"3. 糟糕的响应性\"></a>3. 糟糕的响应性</h2><h2 id=\"4-活锁\"><a href=\"#4-活锁\" class=\"headerlink\" title=\"4. 活锁\"></a>4. 活锁</h2><p>活锁尽管不会阻塞线程，但也不能继续执行，因为线程将重复执行相同的操作，并且总会失败。</p>\n<p>活锁通常发生在事务消息的应用中，如失败，回滚，将它重新放入队列执行。</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"并发编程模型","url":"http://www.shenjian.online/2019/03/11/并发编程模型/","content":"<h2 id=\"1-并行工作者模型\"><a href=\"#1-并行工作者模型\" class=\"headerlink\" title=\"1. 并行工作者模型\"></a>1. 并行工作者模型</h2><h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p>委派者会将传入的工作分配给不同的工作者，每个工作者完成整个任务。并发工作者模型是最常见的并发模型</p>\n<p><img src=\"/2019/03/11/并发编程模型/并行工作者.png\" alt=\"并行工作者\"></p>\n<h3 id=\"1-2-优点\"><a href=\"#1-2-优点\" class=\"headerlink\" title=\"1.2 优点\"></a>1.2 优点</h3><p>只需添加更多的工作者来提高系统的并行度</p>\n<h3 id=\"1-3-缺点\"><a href=\"#1-3-缺点\" class=\"headerlink\" title=\"1.3 缺点\"></a>1.3 缺点</h3><p><strong>共享状态可能会很复杂</strong>  线程间数据共享意味着要处理好竞态、死锁等并发性问题</p>\n<p><strong>工作者无状态</strong> 共享状态能够被其他线程修改，所以工作者在每次需要的时候都要重新读状态，所以称为无状态</p>\n<p><strong>任务执行顺序不确定</strong></p>\n<h2 id=\"2-流水线并发模型\"><a href=\"#2-流水线并发模型\" class=\"headerlink\" title=\"2. 流水线并发模型\"></a>2. 流水线并发模型</h2><h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p>每个工作者只负责作业中的部分工作，完成了会将作业转发给下一个工作者。 采用流水线并发模型的系统又称为反应器系统或者事件驱动系统。以下为其各个表现形式：</p>\n<p><img src=\"/2019/03/11/并发编程模型/流水线并发模型1.png\" alt=\"流水线并发模型1\"></p>\n<p><img src=\"/2019/03/11/并发编程模型/流水线并发模型2.png\" alt=\"流水线并发模型2\"></p>\n<p><img src=\"/2019/03/11/并发编程模型/流水线并发模型3.png\" alt=\"流水线并发模型3\"></p>\n<p><img src=\"/2019/03/11/并发编程模型/流水线并发模型4.png\" alt=\"流水线并发模型4\"></p>\n<h3 id=\"2-2-优点\"><a href=\"#2-2-优点\" class=\"headerlink\" title=\"2.2 优点\"></a>2.2 优点</h3><p><strong>无需共享状态</strong></p>\n<p><strong>工作者有状态</strong></p>\n<p><strong>较好的硬件整合</strong></p>\n<p><strong>合理的作业顺序</strong></p>\n<h3 id=\"2-3-缺点\"><a href=\"#2-3-缺点\" class=\"headerlink\" title=\"2.3 缺点\"></a>2.3 缺点</h3><p>作业被分布到多个工作者中，导致追踪某个工作到底被什么代码执行时变得困难。</p>\n<h2 id=\"3-函数式并行模型\"><a href=\"#3-函数式并行模型\" class=\"headerlink\" title=\"3. 函数式并行模型\"></a>3. 函数式并行模型</h2><p>函数式调用的基本思想是采用函数调用实现程序。函数可以看作代理人，函数之间可以像流水线模型互相发送消息(通过函数间的互相调用实现)。</p>\n<p>函数是通过拷贝来传递参数的，每个函数的执行类似原子操作，执行独立，互不影响。一旦可以独立运行，呢么可以在不同的CPU上进行过执行。</p>\n<p>java.util.concurrent包中的ForkJoinPool可以实现函数式并行的一些东西。JAVA8中的stream能够并行的迭代大型集合。</p>\n<p>跨CPU协调函数调用需要一定开销，要确定好并行的调用函数，其完成的工作单元可以弥补这个开销，否则，慎用！！</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"CompletionService优点及其应用","url":"http://www.shenjian.online/2019/03/03/CompletionService优点及其应用/","content":"<h3 id=\"1-需求描述\"><a href=\"#1-需求描述\" class=\"headerlink\" title=\"1. 需求描述\"></a>1. 需求描述</h3><p>某一图片网站首页有许多图片，渲染时间较长，给用户带来较差体验，为提高用户体验度，图片需缓存且无需等待所有图片全部准备完毕后，进行渲染</p>\n<h3 id=\"2-问题分析与实现\"><a href=\"#2-问题分析与实现\" class=\"headerlink\" title=\"2. 问题分析与实现\"></a>2. 问题分析与实现</h3><p>显而易见，我们可以想到一边获取图片，一边进行渲染，并行操作。但是每张图片获取的时间无法预知，即任务的执行时长不一致，有的可能几毫秒，有的可能几秒, 我们如何才能做到先获取的图片先进行渲染呢？幸好CompletionService适合该场景: 将Executor与BlockingQueue的功能融合在一起，将Callable任务提交给它执行，然后类似队列中的take与poll获取已经完成的任务。</p>\n<h3 id=\"3-CompletionService源码分析\"><a href=\"#3-CompletionService源码分析\" class=\"headerlink\" title=\"3. CompletionService源码分析\"></a>3. CompletionService源码分析</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface CompletionService&lt;V&gt; &#123;</span><br><span class=\"line\">        Future&lt;V&gt; submit(Callable&lt;V&gt; task);</span><br><span class=\"line\"></span><br><span class=\"line\">        Future&lt;V&gt; take() throws InterruptedException;</span><br><span class=\"line\"></span><br><span class=\"line\">        Future&lt;V&gt; poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CompletionService唯一实现类： ExecutorCompletionService。 在构建函数中创建一个BlockingQueue保存结果。任务提交后，将任务包装成QueueingFuture(FutureTask的一个子类)，任务完成后，调用QueueingFuture的done方法，将结果放入BlockingQueue中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ExecutorCompletionService&lt;V&gt; implements CompletionService&lt;V&gt; &#123;</span><br><span class=\"line\">    \tprivate final BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tpublic ExecutorCompletionService(Executor executor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (executor == null)</span><br><span class=\"line\">                    throw new NullPointerException();</span><br><span class=\"line\">                this.executor = executor;</span><br><span class=\"line\">                this.aes = (executor instanceof AbstractExecutorService) ?</span><br><span class=\"line\">                    (AbstractExecutorService) executor : null;</span><br><span class=\"line\">                this.completionQueue = new LinkedBlockingQueue&lt;Future&lt;V&gt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tpublic Future&lt;V&gt; submit(Callable&lt;V&gt; task) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (task == null) throw new NullPointerException();</span><br><span class=\"line\">                RunnableFuture&lt;V&gt; f = newTaskFor(task);</span><br><span class=\"line\">                executor.execute(new QueueingFuture(f)); // 任务包装成QueueingFuture</span><br><span class=\"line\">                <span class=\"built_in\">return</span> f;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private class QueueingFuture extends FutureTask&lt;Void&gt; &#123;</span><br><span class=\"line\">                QueueingFuture(RunnableFuture&lt;V&gt; task) &#123;</span><br><span class=\"line\">                    super(task, null);</span><br><span class=\"line\">                    this.task = task;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                protected void <span class=\"function\"><span class=\"title\">done</span></span>() &#123; completionQueue.add(task); &#125; // 任务完成后，调用<span class=\"keyword\">done</span>方法，放入队列</span><br><span class=\"line\">                private final Future&lt;V&gt; task;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Future&lt;V&gt; take() throws InterruptedException &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> completionQueue.take();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Future&lt;V&gt; <span class=\"function\"><span class=\"title\">poll</span></span>() &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> completionQueue.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-代码实现\"><a href=\"#4-代码实现\" class=\"headerlink\" title=\"4. 代码实现\"></a>4. 代码实现</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 使用CompletionService实现页面渲染器</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Renderer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private ExecutorService executor;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Renderer(ExecutorService executor) &#123;</span><br><span class=\"line\">                this.executor = executor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void renderPage(CharSequence <span class=\"built_in\">source</span>) &#123;</span><br><span class=\"line\">                List&lt;ImageInfo&gt; info = scanImageInfo(<span class=\"built_in\">source</span>);</span><br><span class=\"line\">                CompletionService&lt;ImageData&gt; completionService = new ExecutorCompletionService&lt;&gt;(executor);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (final ImageInfo imageInfo : info) &#123;</span><br><span class=\"line\">                        completionService.submit(() -&gt; &#123;</span><br><span class=\"line\">                                <span class=\"built_in\">return</span> imageInfo.downloadImage();</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                renderText(<span class=\"built_in\">source</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (int i = 0; i &lt; info.size(); i++) &#123;</span><br><span class=\"line\">                                Future&lt;ImageData&gt; future = completionService.take();</span><br><span class=\"line\">                                ImageData imageData = future.get();</span><br><span class=\"line\">                                renderImage(imageData);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125; catch (ExecutionException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["多线程"],"tags":["多线程"]},{"title":"Executor及其相关类分析","url":"http://www.shenjian.online/2019/03/02/Executor及其相关类分析/","content":"<h3 id=\"1-两个重要的接口\"><a href=\"#1-两个重要的接口\" class=\"headerlink\" title=\"1. 两个重要的接口\"></a>1. 两个重要的接口</h3><p>Executor用于应用程序执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Executor &#123;</span><br><span class=\"line\">    \tvoid execute(Runnable <span class=\"built_in\">command</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ExecutorService新增应用程序生命周期管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ExecutorService extends Executor &#123;</span><br><span class=\"line\">      // 平缓方式关闭：不在接受新的任务，同时等待已经提交的任务执行完成(包括呢些已提交还没未开始执行的任务)</span><br><span class=\"line\">  \t \tvoid shutdown(); </span><br><span class=\"line\">      // 粗暴的关闭：尝试取消所有运行中的任务，并且不在启动队列中尚未开始执行的任务，返回从未执行的任务列表</span><br><span class=\"line\">  \t \tList&lt;Runnable&gt; shutdownNow(); </span><br><span class=\"line\">  \t \tboolean isShutdown();</span><br><span class=\"line\">      // 是否已经终止</span><br><span class=\"line\">  \t \tboolean isTerminated();</span><br><span class=\"line\">      // 阻塞直到到达终止状态</span><br><span class=\"line\">  \t \tboolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;</span><br><span class=\"line\">      // 传入n个Callable任务，按序返回一组Future</span><br><span class=\"line\">      &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-线程池\"><a href=\"#2-线程池\" class=\"headerlink\" title=\"2. 线程池\"></a>2. 线程池</h3><p><img src=\"/2019/03/02/Executor及其相关类分析/ThreadPool.png\" alt=\"线程池类图\"></p>\n<p>线程池与工作队列密切相关，工作队列中存取所有等待执行的任务，工作线程在工作队列中获取一个任务，执行任务，然后返回线程池等待执行下一个任务</p>\n<p>可以通过Executors中的静态方法来创建线程池：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Executors &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t// 创建固定长度的线程，达到最大规模后，如果某一线程Exception结束，</span><br><span class=\"line\">        // 线程池会补充一个新的线程；采用LinkedBlockingQueue</span><br><span class=\"line\">    \t\tpublic static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class=\"line\">           \t \t\t<span class=\"built_in\">return</span> new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                          0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                          new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t// 创建可缓冲的线程池，当线程池当前规模超过处理需求时，回收空闲线程; </span><br><span class=\"line\">        // 当需求增加时，创建新的线程，线程池的规模不受限制(需求突增，规模可怕，慎用!)</span><br><span class=\"line\">      \t// 采用SynchronousQueue，A synchronous queue does not have any internal capacity</span><br><span class=\"line\">      \tpublic static ExecutorService <span class=\"function\"><span class=\"title\">newCachedThreadPool</span></span>() &#123;</span><br><span class=\"line\">         \t\t\t  <span class=\"built_in\">return</span> new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class=\"line\">                                        60L, TimeUnit.SECONDS,</span><br><span class=\"line\">                                        new SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t// 单线程Executor, FinalizableDelegatedExecutorService: 静态内部类, 继承自DelegatedExecutorService;</span><br><span class=\"line\">        // 采用LinkedBlockingQueue</span><br><span class=\"line\">      \tpublic static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) &#123;</span><br><span class=\"line\">          \t\t  <span class=\"built_in\">return</span> new FinalizableDelegatedExecutorService</span><br><span class=\"line\">              \t\t\t(new ThreadPoolExecutor(1, 1,</span><br><span class=\"line\">                                      0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                      new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class=\"line\">                                      threadFactory));</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t// 固定长度的线程池，延迟或者定时的方式执行任务;</span><br><span class=\"line\">        // 采用ScheduledThreadPoolExecutor.DelayedWorkQueue</span><br><span class=\"line\">      \tpublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class=\"line\">          \t   \t<span class=\"built_in\">return</span> new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["多线程"],"tags":["多线程"]},{"title":"基于数组的ArrayList","url":"http://www.shenjian.online/2019/03/01/基于数组的ArrayList/","content":"<p>ArrayList基于数组，故需注意数组相关注意事项，详见 <a href=\"https://sjshenjian.github.io/2019/01/25/%E6%95%B0%E7%BB%84/\" target=\"_blank\" rel=\"noopener\">数组</a></p>\n<p>首先我们看到ArrayList在集合中的位置如图</p>\n<p><img src=\"/2019/03/01/基于数组的ArrayList/ArrayList在Collection中的位置.png\" alt=\"基于数组的ArrayList\"></p>\n<h3 id=\"1-几个重要的变量\"><a href=\"#1-几个重要的变量\" class=\"headerlink\" title=\"1. 几个重要的变量\"></a>1. 几个重要的变量</h3><p>数组默认容量大小为10，transient忽略数组被序列化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final int DEFAULT_CAPACITY = 10; // 默认数组大小，也可构造器指定</span><br><span class=\"line\">transient Object[] elementData; // 存放元素</span><br><span class=\"line\">private int size; // 当前数组大小</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-插入方法\"><a href=\"#2-插入方法\" class=\"headerlink\" title=\"2. 插入方法\"></a>2. 插入方法</h3><p>首先保证数组容量是否足够，不够则使用grow()方法进行1.5倍扩容，modCount++以便迭代器遍历时其他线程进行不期望的修改时抛出ConcurrentModificationException，从而快速失败(fail-fast)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        elementData[size++] = e;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void grow(int minCapacity) &#123;</span><br><span class=\"line\">        // overflow-conscious code</span><br><span class=\"line\">        int oldCapacity = elementData.length;</span><br><span class=\"line\">        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 右移1位，扩容1.5倍</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">        // minCapacity is usually close to size, so this is a win:</span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity); // 底层采用Array.newInstance与System.arraycopy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-删除方法\"><a href=\"#3-删除方法\" class=\"headerlink\" title=\"3. 删除方法\"></a>3. 删除方法</h3><p>index后数组拷贝至已index为头，已size-1为尾，数组中的最后一个非空元素置为null,以便垃圾回收</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public E remove(int index) &#123;</span><br><span class=\"line\">\t    rangeCheck(index);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    modCount++;</span><br><span class=\"line\">\t    E oldValue = elementData(index);</span><br><span class=\"line\"></span><br><span class=\"line\">\t    int numMoved = size - index - 1;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (numMoved &gt; 0)</span><br><span class=\"line\">\t        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">\t                         numMoved); // 涉及数组的拷贝，时间复杂度为O(n)</span><br><span class=\"line\">\t    elementData[--size] = null; // clear to <span class=\"built_in\">let</span> GC <span class=\"keyword\">do</span> its work</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"built_in\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-查找方法\"><a href=\"#4-查找方法\" class=\"headerlink\" title=\"4. 查找方法\"></a>4. 查找方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int indexOf(Object o) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (o == null) &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">for</span> (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">\t            <span class=\"keyword\">if</span> (elementData[i]==null)</span><br><span class=\"line\">\t                <span class=\"built_in\">return</span> i;</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">for</span> (int i = 0; i &lt; size; i++)</span><br><span class=\"line\">\t            <span class=\"keyword\">if</span> (o.equals(elementData[i]))</span><br><span class=\"line\">\t                <span class=\"built_in\">return</span> i;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>ArrayList的插入不考虑扩容时间复杂度为O(1), 考虑扩容时间复杂度为O(n), 查找与修改时间复杂度为O(n)。<br>数据量大时，频繁的插入与删除会触发底层数组频繁的拷贝，效率低，还会造成内存空间的浪费。</p>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"JAVA实现登录获取资源","url":"http://www.shenjian.online/2019/03/01/JAVA实现登录获取资源/","content":"<h3 id=\"1-需求描述\"><a href=\"#1-需求描述\" class=\"headerlink\" title=\"1. 需求描述\"></a>1. 需求描述</h3><p>每月定时从第三方系统获取excel报表(报表内容格式较为复杂)，留痕解析落地数据库</p>\n<p>需求涉及到的开发过程如下：<br>1）登录第三方系统(已提供url、username、password及js jsonp方式登录demo)<br>2）url方式获取财务报表(已提供报表url)保存至服务器按月建立文件夹存储进行留痕<br>3）excel解析落地数据库临时表</p>\n<h3 id=\"2-分析过程\"><a href=\"#2-分析过程\" class=\"headerlink\" title=\"2. 分析过程\"></a>2. 分析过程</h3><p>本文仅讨论如何实现JAVA模拟JSONP方式进行登录</p>\n<p>采用jsonp方式登录缺点： 需js实现定时；需js实现资源获取与保存，由于js知识欠缺且个人认为js实现不如java方式简便便于管理</p>\n<p>我们知道，系统登录成功后，<strong>服务器会返回给浏览器一个JSESSIONID用于用户再次访问时的身份凭证</strong>，删除该JSESSIONID后再次访问则重定向到登录页面。</p>\n<p><img src=\"/2019/03/01/JAVA实现登录获取资源/JSESSIONID.png\" alt=\"JSESSIONID\"></p>\n<h3 id=\"3-解决方案\"><a href=\"#3-解决方案\" class=\"headerlink\" title=\"3. 解决方案\"></a>3. 解决方案</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package online.shenjian.jsonp;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\">import org.apache.commons.httpclient.HttpClient;</span><br><span class=\"line\">import org.apache.commons.httpclient.methods.GetMethod;</span><br><span class=\"line\">import org.springframework.http.*;</span><br><span class=\"line\">import org.springframework.web.client.RestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * JAVA方式模拟JSONP登录获取数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JsonpLogin &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        RestTemplate restTemplate = new RestTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">        String url = <span class=\"string\">\"http://ip:port/report/reportServer\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        JSONObject jsonObject = new JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        String body = jsonObject.toJSONString();</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpHeaders headers = new HttpHeaders();</span><br><span class=\"line\">        MediaType mediaType = MediaType.parseMediaType(<span class=\"string\">\"application/json; charset=UTF-8\"</span>);</span><br><span class=\"line\">        headers.setContentType(mediaType);</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(body, headers);</span><br><span class=\"line\"></span><br><span class=\"line\">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(url, entity, String.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HttpStatus.OK.equals(responseEntity.getStatusCode())) &#123;</span><br><span class=\"line\">            String cookieString = String.valueOf(responseEntity.getHeaders().get(<span class=\"string\">\"Set-Cookie\"</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cookieString != null &amp;&amp; cookieString.length() &gt; 1) &#123;</span><br><span class=\"line\">                cookieString = cookieString.substring(1, cookieString.length() - 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String address = <span class=\"string\">\"http://ip:port/webReport/reportServer?report=test.xlsx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            HttpClient httpClient = new HttpClient();</span><br><span class=\"line\">            GetMethod getMethod = new GetMethod(address);</span><br><span class=\"line\">            // Cookie如不传递，服务器则认为为新请求，故下载内容后缀更改为html,会发现为登录页面</span><br><span class=\"line\">            getMethod.setRequestHeader(<span class=\"string\">\"Cookie\"</span>, cookieString);</span><br><span class=\"line\"></span><br><span class=\"line\">            int statusCode = httpClient.executeMethod(getMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">            InputStream inputStream = null;</span><br><span class=\"line\">            OutputStream outputStream = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (statusCode == org.apache.commons.httpclient.HttpStatus.SC_OK) &#123;</span><br><span class=\"line\">                    inputStream = getMethod.getResponseBodyAsStream();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                File file = new File(<span class=\"string\">\"/home/document/report/201902/test.xlsx\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">                    file.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                outputStream = new FileOutputStream(file);</span><br><span class=\"line\">                // 由于报表文件较小，不到M,不采用缓冲流(默认大小8M)</span><br><span class=\"line\">                byte[] bytes = new byte[1024];</span><br><span class=\"line\">                int size;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((size = inputStream.read(bytes)) != -1) &#123;</span><br><span class=\"line\">                    outputStream.write(bytes, 0, size);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (inputStream != null) &#123;</span><br><span class=\"line\">                    inputStream.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (outputStream != null) &#123;</span><br><span class=\"line\">                    outputStream.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["工作干货"],"tags":["工作干货"]},{"title":"构建高效可伸缩的缓存","url":"http://www.shenjian.online/2019/02/25/构建高效可伸缩的缓存/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">public interface Computable&lt;K, V&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    V compute(K key) throws InterruptedException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 构建高效且可伸缩的缓存</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MemCache&lt;K, V&gt; implements Computable&lt;K, V&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final ConcurrentHashMap&lt;K, Future&lt;V&gt;&gt; cache = new ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    private final Computable&lt;K, V&gt; computable;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MemCache(Computable&lt;K, V&gt; computable) &#123;</span><br><span class=\"line\">        this.computable = computable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public V compute(K key) throws InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            Future&lt;V&gt; f = cache.get(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f == null) &#123;</span><br><span class=\"line\">                Callable&lt;V&gt; callable = () -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> computable.compute(key);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                FutureTask&lt;V&gt; task = new FutureTask&lt;&gt;(callable);</span><br><span class=\"line\">                Future&lt;V&gt; ft = cache.putIfAbsent(key, task);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f == null) &#123;</span><br><span class=\"line\">                    f = ft;</span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f != null) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> f.get();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (CancellationException e) &#123;</span><br><span class=\"line\">                cache.remove(key, f);</span><br><span class=\"line\">            &#125; catch (ExecutionException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Computable&lt;Integer, Integer&gt; computable = (key) -&gt; &#123;</span><br><span class=\"line\">            // 模拟费时计算过程</span><br><span class=\"line\">            Thread.sleep(10000);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> key;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        MemCache&lt;Integer, Integer&gt; memCache = new MemCache&lt;&gt;(computable);</span><br><span class=\"line\"></span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = new CyclicBarrier(1, () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; 6; i++) &#123;</span><br><span class=\"line\">                new Thread(() -&gt; &#123;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        long startTime = System.currentTimeMillis();</span><br><span class=\"line\">                        memCache.compute(99);</span><br><span class=\"line\">                        long endTime = System.currentTimeMillis();</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"从缓存中取值线程执行时间为：\"</span> + (endTime - startTime));</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(() -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                long startTime = System.currentTimeMillis();</span><br><span class=\"line\">                memCache.compute(99);</span><br><span class=\"line\">                long endTime = System.currentTimeMillis();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"未从缓存中取值线程执行时间为：\"</span> + (endTime - startTime));</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; catch (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果</strong><br>未从缓存中取值线程执行时间为：10010<br>从缓存中取值线程执行时间为：0<br>从缓存中取值线程执行时间为：0<br>从缓存中取值线程执行时间为：0<br>从缓存中取值线程执行时间为：0<br>从缓存中取值线程执行时间为：0<br>从缓存中取值线程执行时间为：0</p>\n","categories":["高并发"],"tags":["高并发"]},{"title":"JAVA同步工具类之栅栏","url":"http://www.shenjian.online/2019/02/24/JAVA同步工具类之栅栏/","content":"<p>栅栏类似于闭锁，它能阻塞一组线程直到某个事件发生，CyclicBarrier可以使一定数量的参与方反复的在栅栏处汇集。</p>\n<p>当线程到达栅栏处，将调用CyclicBarrier.await方法，这个方法一直阻塞直到所有线程到达栅栏处，当所有线程到达了栅栏处，栅栏将打开，所有线程被释放，而栅栏被重置以便下次使用。</p>\n<p><strong>栅栏与闭锁区别</strong><br>所有线程必须全部到达栅栏处，才能继续执行；闭锁结束前，不允许线程执行，结束时，允许所有线程执行<br>栅栏等待线程；闭锁等待事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 栅栏理解代码示例</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CyclicBarrierWorker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Worker implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int id;</span><br><span class=\"line\">        private CyclicBarrier cyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\">        public Worker(int id, CyclicBarrier cyclicBarrier) &#123;</span><br><span class=\"line\">            this.id = id;</span><br><span class=\"line\">            this.cyclicBarrier = cyclicBarrier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void <span class=\"function\"><span class=\"title\">run</span></span>() &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程\"</span> + id + <span class=\"string\">\"已到达栅栏处\"</span>);</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; catch (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = new CyclicBarrier(10, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"所有线程已到达栅栏处, 2333\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">            new Thread(new CyclicBarrierWorker().new Worker(i, cyclicBarrier)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行结果</strong></p>\n<p>线程0已到达栅栏处<br>线程4已到达栅栏处<br>线程3已到达栅栏处<br>线程2已到达栅栏处<br>线程1已到达栅栏处<br>线程6已到达栅栏处<br>线程8已到达栅栏处<br>线程7已到达栅栏处<br>线程5已到达栅栏处<br>线程9已到达栅栏处<br>所有线程已到达栅栏处, 2333</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"JAVA同步工具类之信号量","url":"http://www.shenjian.online/2019/02/24/JAVA同步工具类之信号量/","content":"<p>计数信号量(Counting Semaphore)用来控制同时访问某个资源的操作数量。信号量还可以实现资源池，为容器设置边界。</p>\n<p>Semaphore管理着一组虚拟的许可，许可的初始数量可以通过构造函数来指定。acquire获取许可，没有许可则阻塞直到有许可，release将返回一个许可给信号量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 使用Semaphore为容器设置边界</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class BoundedHashSet&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Set&lt;T&gt; <span class=\"built_in\">set</span>;</span><br><span class=\"line\">    private final Semaphore semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\">    public BoundedHashSet(int bound) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">set</span> = Collections.synchronizedSet(new HashSet&lt;&gt;());</span><br><span class=\"line\">        semaphore = new Semaphore(bound);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean add(T e) throws InterruptedException &#123;</span><br><span class=\"line\">        semaphore.acquire();</span><br><span class=\"line\">        boolean wasAdded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            wasAdded = set.add(e);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> wasAdded;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!wasAdded) &#123;</span><br><span class=\"line\">                semaphore.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean remove(Object o) &#123;</span><br><span class=\"line\">        boolean wasRemoved = set.remove(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wasRemoved) &#123;</span><br><span class=\"line\">            semaphore.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> wasRemoved;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["多线程"],"tags":["多线程"]},{"title":"JAVA同步工具类之闭锁","url":"http://www.shenjian.online/2019/02/24/JAVA同步工具类之闭锁/","content":"<p>闭锁是一种同步工具类，可以延迟线程的进度直到其到达终止状态。<br>闭锁相当于一扇门，在闭锁结束之前，这扇门一直关闭，没有任何线程能够通过；当闭锁结束时，这扇门打开，所有的线程均可通过</p>\n<p>闭锁状态包括一个计数器，该计数器初始化为一个正数，表示需要等待的事件数量。countDown方法递减计数器，表示一个事件已经发生，如果计数器非零，则await方法等待计数器为零，或等待中的线程中断或者等待超时。</p>\n<p>闭锁是一次性对象，一旦进入终止状态，就不能被重置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package concurrent.module;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 闭锁实现统计多个线程执行时间</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestHarness &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public long timeTasks(int nThreads, final Runnable task) throws InterruptedException &#123;</span><br><span class=\"line\">       CountDownLatch startGate = new CountDownLatch(1);</span><br><span class=\"line\">       CountDownLatch endGate = new CountDownLatch(nThreads);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (int i = 0 ; i &lt; nThreads; i++) &#123;</span><br><span class=\"line\">           new Thread(() -&gt; &#123;</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   startGate.await();</span><br><span class=\"line\">                   try &#123;</span><br><span class=\"line\">                       task.run();</span><br><span class=\"line\">                   &#125; finally &#123;</span><br><span class=\"line\">                       endGate.countDown();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;).start();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       long startTime = System.nanoTime();</span><br><span class=\"line\">       startGate.countDown();</span><br><span class=\"line\">       endGate.await();</span><br><span class=\"line\">       long endTime = System.nanoTime();</span><br><span class=\"line\">       <span class=\"built_in\">return</span> endTime - startTime;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">       Runnable runnable = () -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">        long time = new TestHarness().timeTasks(4, runnable);</span><br><span class=\"line\">        System.out.println(time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["多线程"],"tags":["多线程"]},{"title":"队列和生产者-消费者模式","url":"http://www.shenjian.online/2019/02/24/阻塞队列和生产者-消费者模式/","content":"<h2 id=\"1-阻塞队列\"><a href=\"#1-阻塞队列\" class=\"headerlink\" title=\"1. 阻塞队列\"></a>1. 阻塞队列</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 桌面搜索应用中的生产者任务和消费者任务</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class FileCrawler implements Runnable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final BlockingQueue&lt;File&gt; queue;</span><br><span class=\"line\">    private final FileFilter fileFilter;</span><br><span class=\"line\">    private final File root;</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">run</span></span>() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            crawl(root);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void crawl(File root) throws InterruptedException &#123;</span><br><span class=\"line\">        File[] files = root.listFiles(fileFilter);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files != null) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (File file: files) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                    crawl(file);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!alreadyIndexed(file))&#123;</span><br><span class=\"line\">                    queue.put(file);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 索引建立</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Indexer implements Runnable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final BlockingQueue&lt;File&gt; fileQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Indexer(BlockingQueue&lt;File&gt; fileQueue) &#123;</span><br><span class=\"line\">        this.fileQueue = fileQueue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">run</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                indexFile(fileQueue.take());</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 应用启动</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Window &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">startIndexing</span></span>() &#123;</span><br><span class=\"line\">        BlockingQueue&lt;File&gt; fileQueue = new ArrayBlockingQueue&lt;&gt;(8);</span><br><span class=\"line\">        FileFilter fileFilter = (pathname) -&gt; &#123; <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        String path =  <span class=\"string\">\"src\"</span> + File.separator + <span class=\"string\">\"main\"</span> + File.separator + <span class=\"string\">\"resources\"</span> +</span><br><span class=\"line\">                File.separator + <span class=\"string\">\"concurrent\"</span>;</span><br><span class=\"line\">        File root = new File(path);</span><br><span class=\"line\"></span><br><span class=\"line\">        new Thread(new FileCrawler(fileQueue, fileFilter, root)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">            new Thread(new Indexer(fileQueue)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-双端队列\"><a href=\"#2-双端队列\" class=\"headerlink\" title=\"2. 双端队列\"></a>2. 双端队列</h2><p>JAVA6新增两种容器类型，Deque与BlockingDeque，分别为Queue与BlockingQueue的扩展。 Deque是一种双端队列，实现了队列头和队列尾的高效插入与删除，具体实现包括ArrayDeque和LinkedBlockingDeque.</p>\n<p><strong>工作密取</strong> 在生产者-消费者设计中，所有的消费者拥有一个工作队列，而在工作密取中，每个消费者拥有一个双端队列，如果消费者完成自己双端队列的工作，则可以从其他消费者双端队列末尾秘密的获取工作。</p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"CopyOnWriteArrayList实现原理","url":"http://www.shenjian.online/2019/02/23/CopyOnWriteArrayList实现原理/","content":"<h2 id=\"1-实现原理\"><a href=\"#1-实现原理\" class=\"headerlink\" title=\"1. 实现原理\"></a>1. 实现原理</h2><p>CopyOnWriteArrayList是线程安全且读操作无锁的ArrayList,写操作则通过创建底层数组的新副本来实现，是一种<strong>读写分离</strong>的并发策略。对于写操作，比如向容器中添加一个元素，首先将当前容器复制一份，然后在新副本上执行写操作，然后将原容器的引用指向新容器</p>\n<h2 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h2><p>读操作不加锁，性能很高，适合<strong>读多写少</strong>的并发场景，使用迭代器遍历时候，不会抛出ConcurrentModificationException异常</p>\n<h2 id=\"3-缺点\"><a href=\"#3-缺点\" class=\"headerlink\" title=\"3. 缺点\"></a>3. 缺点</h2><p>1）内存占用问题 每次写操作都要创建底层数组的新副本，当数据量大时，内存压力较大，可能引起频繁GC<br>2）无法保证实时性 写和读操作作用在不同的容器上，在写做操作执行的过程中，读操作不会阻塞但是会读取到老容器的数据</p>\n<h2 id=\"4-源码分析\"><a href=\"#4-源码分析\" class=\"headerlink\" title=\"4. 源码分析\"></a>4. 源码分析</h2><p>add/remove方式使用<code>ReentrantLock</code>，操作前lock(),操作时Arrays.copyOf进行数组拷贝,操作后unlock()</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">        final ReentrantLock lock = this.lock;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Object[] elements = getArray();</span><br><span class=\"line\">            int len = elements.length;</span><br><span class=\"line\">            Object[] newElements = Arrays.copyOf(elements, len + 1);</span><br><span class=\"line\">            newElements[len] = e;</span><br><span class=\"line\">            setArray(newElements);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public E remove(int index) &#123;</span><br><span class=\"line\">     final ReentrantLock lock = this.lock;</span><br><span class=\"line\">     lock.lock();</span><br><span class=\"line\">     try &#123;</span><br><span class=\"line\">         Object[] elements = getArray();</span><br><span class=\"line\">         int len = elements.length;</span><br><span class=\"line\">         E oldValue = get(elements, index);</span><br><span class=\"line\">         int numMoved = len - index - 1;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (numMoved == 0)</span><br><span class=\"line\">             setArray(Arrays.copyOf(elements, len - 1));</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             Object[] newElements = new Object[len - 1];</span><br><span class=\"line\">             System.arraycopy(elements, 0, newElements, 0, index);</span><br><span class=\"line\">             System.arraycopy(elements, index + 1, newElements, index,</span><br><span class=\"line\">                              numMoved);</span><br><span class=\"line\">             setArray(newElements);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">return</span> oldValue;</span><br><span class=\"line\">     &#125; finally &#123;</span><br><span class=\"line\">         lock.unlock();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>读操作时无需加锁，直接读取</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private E get(Object[] a, int index) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (E) a[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["高并发"],"tags":["高并发","面试"]},{"title":"ConcurrentHashMap的实现原理","url":"http://www.shenjian.online/2019/02/14/ConcurrentHashMap的实现原理/","content":"<h2 id=\"1-哈希表\"><a href=\"#1-哈希表\" class=\"headerlink\" title=\"1. 哈希表\"></a>1. 哈希表</h2><h3 id=\"1-1-介绍\"><a href=\"#1-1-介绍\" class=\"headerlink\" title=\"1.1 介绍\"></a>1.1 介绍</h3><p>哈希表是一种key-value存储数据的结构，根据key即可查到对应的value。<br>如果所有的键是整数，我们可用简单的无序数组来表示，键作为数组索引，值即为对应的值</p>\n<h3 id=\"1-2-链式哈希表\"><a href=\"#1-2-链式哈希表\" class=\"headerlink\" title=\"1.2 链式哈希表\"></a>1.2 链式哈希表</h3><p>链式哈希表本质由一组链表构成。每个链表可以看作一个桶，将键传入哈希函数(该过程称为哈希键)，函数通过散列的方式告知元素属于哪个桶，然后在相应的链表头插入元素。查找与删除，以同样的方式先找到桶，然后遍历链表得到想要的元素。<br>由于每个桶都是一个链表，所以链式哈希表不限制元素的个数，但是，如果表变的特别大，则性能会降低</p>\n<p><img src=\"/2019/02/14/ConcurrentHashMap的实现原理/链式哈希表结构.jpg\" alt=\"链式哈希表结构图\"></p>\n<h3 id=\"1-3-应用场景\"><a href=\"#1-3-应用场景\" class=\"headerlink\" title=\"1.3 应用场景\"></a>1.3 应用场景</h3><p>缓存技术（redis、memcached）在内存中维护一个巨大的哈希表，还有HashMap、ConcurrentHashMap</p>\n<h2 id=\"2-ConcurrentHashMap与HashMap等的区别\"><a href=\"#2-ConcurrentHashMap与HashMap等的区别\" class=\"headerlink\" title=\"2. ConcurrentHashMap与HashMap等的区别\"></a>2. ConcurrentHashMap与HashMap等的区别</h2><p><strong>HashMap</strong></p>\n<p>HashMap线程不安全，在多线程情况下，执行HashMap的put操作会引起死循环，导致CPU利用率接近100%</p>\n<p><strong>HashTable</strong></p>\n<p>HashTable相对于HashMap不允许key、value为空<br>HashTable是线程安全的。但其线程安全策略代价太大，对整个Map上锁，只有一个线程能访问与操作该Map, 多线程竞争激烈的情况下，性能会非常差</p>\n<p><strong>ConcurrentHashMap</strong></p>\n<p>Map一般都是数组+链表结构（JDK1.8改为数组+红黑树）</p>\n<p><img src=\"/2019/02/14/ConcurrentHashMap的实现原理/Map结构.jpg\" alt=\"Map结构图\"></p>\n<p>ConcurrentHashMap避免了全局加锁而改用局部加锁，极大的提高了并发环境下的操作速度；<br>大量的使用了volatile、final、CAS等lock-free技术来减少竞争对性能带来的影响</p>\n<h2 id=\"3-JDK1-7-1-8的ConcurrentHashMap实现原理\"><a href=\"#3-JDK1-7-1-8的ConcurrentHashMap实现原理\" class=\"headerlink\" title=\"3. JDK1.7 1.8的ConcurrentHashMap实现原理\"></a>3. JDK1.7 1.8的ConcurrentHashMap实现原理</h2><p><strong>JDK1.7 ConcurrentHashMap实现原理</strong></p>\n<p>在JDK1.7中ConcurrentHashMap采用数组+Segment+分段锁的方式实现</p>\n<h3 id=\"3-1-Segment-分段锁\"><a href=\"#3-1-Segment-分段锁\" class=\"headerlink\" title=\"3.1 Segment(分段锁)\"></a>3.1 Segment(分段锁)</h3><p>ConcurrentHashMap中的分段锁称为Segment.它类似HashMap的结构，内部拥有一个Entry数组，数组中的每个元素又是一个链表，同时又是一个ReentrantLock(Segment继承了ReentrantLock)</p>\n<h3 id=\"3-2-内部结构\"><a href=\"#3-2-内部结构\" class=\"headerlink\" title=\"3.2 内部结构\"></a>3.2 内部结构</h3><p>Concurrent使用分段锁机制，将数据一段一段的存储，然后给每一段数据加锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据可以被其他线程访问，能够实现真正的并发访问。</p>\n<p><img src=\"/2019/02/14/ConcurrentHashMap的实现原理/ConcurrentHashMap内部结构图.jpg\" alt=\"ConcurrentHashMap内部结构图\"></p>\n<p>由图可见，ConcurrentHashMap定位一个元素需要经过两次hash过程：第一次定位到Segmnent,第二次定位到元素所在的链表的头部</p>\n<h3 id=\"3-3-该结构的优缺点\"><a href=\"#3-3-该结构的优缺点\" class=\"headerlink\" title=\"3.3 该结构的优缺点\"></a>3.3 该结构的优缺点</h3><p>缺点：Hash的过程要比普通的HashMap要长<br>优点：写操作时只对元素所在的Segment进行加锁即可，不会影响到其他Segment,在最理想的情况下,ConcurrentHashMap可以最高同时支持Segment数量大小的写操作（写操作非常平均的分布在所有Segment上）。所以，通过这种结构，ConcurrentHashMap并发能力大大提高。</p>\n<p><strong>JDK1.8 ConcurrentHashMap实现原理</strong></p>\n<p>1) JDK8中ConcurrentHashMap的实现参考了JDK8中HashMap的实现，采用了<strong>数组+链表+红黑树</strong>的实现方式，内部大量采用<strong>CAS操作</strong>。</p>\n<p>CAS是compare and swap的缩写，即比较并交换。CAS是一种基于锁的操作，而且是乐观锁。在JAVA中分为乐观锁与悲观锁，悲观锁将资源锁住，等释放后下一个线程才可以进行访问，而乐观锁采用一种宽泛的方式进行处理，通过某种方式不加锁来处理资源，比如通过给记录加version来获取资源，性能较悲观锁有很大提高。<br>CAS操作包含三个操作数–内存位置(V)，预期原值(A)和新值(B), 如果内存地址里的值与A相同，则将值更新为B。CAS是通过无限循环来获取数据的，如果在第一轮循环中，a线程获取地址里的值被b线程修改了，呢么a线程需要自旋，到下次循环时才有可能执行</p>\n<p>2) JDK8中彻底放弃了Segment转而采用Node,其设计思想不在是JDK7中分段锁的思想</p>\n<p>Node: 保存key,value和key的hash值的数据结构，value与next都用volatile修饰，保证了并发的可见性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    final int <span class=\"built_in\">hash</span>;</span><br><span class=\"line\">    final K key;</span><br><span class=\"line\">    volatile V val;</span><br><span class=\"line\">    volatile Node&lt;K,V&gt; next;</span><br><span class=\"line\">    //... 省略部分代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）JDK8中ConcurrentHashMap在链表的长度大于某个阈值(默认为8)的时候会将链表O(n)转化为红黑树O(logN)进一步提高查找性能</p>\n<p><img src=\"/2019/02/14/ConcurrentHashMap的实现原理/链表红黑树.jpg\" alt=\"链表红黑树\"></p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4 总结\"></a>4 总结</h2><p><strong>数据结构</strong> JDK7采用数组+Segment的段锁的数据结构，JDK8采用数组+链表+红黑树的数据结构<br><strong>线程安全机制</strong> JDK7采用Segment分段锁实现线程安全，其中Segment继承ReentrantLock. JDK8采用CAS+synchronized保证线程安全<br><strong>锁的粒度</strong> JDK7对Segment进行加锁，JDK8对数组中每个元素(Node)加锁<br><strong>查询时间复杂度</strong> 遍历链表O(N), 红黑树(O(logN))</p>\n<p>ps: 参考 <a href=\"http://youzhixueyuan.com/concurrenthashmap.html\" target=\"_blank\" rel=\"noopener\">http://youzhixueyuan.com/concurrenthashmap.html</a></p>\n","categories":["高并发"],"tags":["高并发","面试"]},{"title":"浏览器间接性崩溃服务器400错误排查分析","url":"http://www.shenjian.online/2019/02/14/浏览器间接性崩溃服务器400错误排查分析/","content":"<h2 id=\"1-问题现象描述\"><a href=\"#1-问题现象描述\" class=\"headerlink\" title=\"1. 问题现象描述\"></a>1. 问题现象描述</h2><p>最近谷歌浏览器间接性的崩溃，服务器400错误，所用livebos-tomcat为6.5</p>\n<h2 id=\"2-排查过程\"><a href=\"#2-排查过程\" class=\"headerlink\" title=\"2. 排查过程\"></a>2. 排查过程</h2><p>多次记录出现错误的日期，搜索上下文，未发现任何服务器报错的信息；<br>恰好计划tomcat升级为livebos-tomcat8.5，故优先升级tomcat为8.5；<br>后仍然出现该错误，只不过有了错误提示： java.lang.IllegalArgumentException: Request header is too large<br>联想最近开发的新功能rest方式调用oa接口，流程传递json串，可能因为json串的过长原因导致；</p>\n<h2 id=\"3-解决方案\"><a href=\"#3-解决方案\" class=\"headerlink\" title=\"3. 解决方案\"></a>3. 解决方案</h2><p><strong>普通tomcat</strong> </p>\n<p>在server.xml中 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector connectionTimeout=<span class=\"string\">\"20000\"</span> port=<span class=\"string\">\"8080\"</span> protocol=<span class=\"string\">\"HTTP/1.1\"</span> redirectPort=<span class=\"string\">\"8443\"</span> maxPostSize=<span class=\"string\">\"0\"</span> maxHttpHeaderSize =<span class=\"string\">\"102400\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>处加上maxHttpHeaderSize =”102400”</p>\n<p><strong>SpringBoot</strong></p>\n<p>在application.properties文件中添加 <code>server.max-http-header-size=102400</code></p>\n","categories":["工作干货"],"tags":["工作干货"]},{"title":"浅谈栈帧结构","url":"http://www.shenjian.online/2019/01/29/浅谈栈帧结构/","content":"<p><img src=\"/2019/01/29/浅谈栈帧结构/jvmStack.jpg\" alt=\"虚拟机内存结构\"></p>\n<h2 id=\"1-虚拟机栈在运行时数据区位置\"><a href=\"#1-虚拟机栈在运行时数据区位置\" class=\"headerlink\" title=\"1. 虚拟机栈在运行时数据区位置\"></a>1. 虚拟机栈在运行时数据区位置</h2><p>如图所示，JAVA虚拟机栈与本地方法栈及程序计数器为线程私有； 方法区与JAVA堆为线程共享，以上共同组成了运行时数据区。</p>\n<h2 id=\"2-何为栈帧\"><a href=\"#2-何为栈帧\" class=\"headerlink\" title=\"2. 何为栈帧\"></a>2. 何为栈帧</h2><p>虚拟机栈包含栈帧。 一个方法开始执行的时候同时会在栈空间中创建一个栈帧，一个方法的调用与执行完成对应一个栈帧的入栈与出栈</p>\n<h2 id=\"3-栈帧结构\"><a href=\"#3-栈帧结构\" class=\"headerlink\" title=\"3. 栈帧结构\"></a>3. 栈帧结构</h2><p><img src=\"/2019/01/29/浅谈栈帧结构/jvmStackFrame.jpg\" alt=\"栈帧结构\"></p>\n<p><strong>局部变量表</strong> 局部变量表以变量槽(slot)为最小存储单位。</p>\n<p>存储类型：</p>\n<ul>\n<li>基本数据类型： byte/boolean/char/short/int/float/long/double 由于每个slot只能存32位，故long/double需要2个slot存储</li>\n<li>reference类型: </li>\n<li>returnAddress类型：</li>\n</ul>\n<p><strong>操作数栈</strong></p>\n<ul>\n<li>是一个先入后出的栈</li>\n<li>JAVA虚拟机的解释执行引擎称为”基于栈的执行引擎”，其中所指的栈就是操作数栈</li>\n</ul>\n<p><strong>动态链接</strong></p>\n<p>在运行时创建的直接引用称为动态链接。 每一个栈帧都包含有一个指向运行时常量池(位于方法区)该栈帧所属方法的引用，该引用就是为了方法调用过程中的动态链接。</p>\n<p><strong>返回地址</strong></p>\n<p>方法开始后有两种方式退出：正常退出和异常退出</p>\n<p><em>正常退出：</em> 执行引擎遇到任意一个方法返回的字节码指令，如ftreturn、dreturn，可能有返回值返回给方法上一层调用者<br><em>异常退出：</em> 无论是JAVA虚拟机内部的产生的异常，还是代码中使用athrow产生的异常，只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。异常退出无返回值返回给方法上一层调用者。</p>\n","categories":["JVM"],"tags":["面试"]},{"title":"JAVA程序启动至少会启动几个线程","url":"http://www.shenjian.online/2019/01/28/JAVA程序启动至少会启动几个线程/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class=\"line\">   ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class=\"line\">   \tSystem.out.println(threadInfo.getThreadId() + <span class=\"string\">\":\"</span> + threadInfo.getThreadName());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>JDK1.8 执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6:Monitor Ctrl-Break</span><br><span class=\"line\">5:Attach Listener 接收外部JVM命令</span><br><span class=\"line\">4:Signal Dispatcher 分发到不同的模块进行处理外部JVM命令，并且返回处理结结果</span><br><span class=\"line\">3:Finalizer <span class=\"comment\"># 调用对象的finalize方法的线程，即垃圾回收的线程</span></span><br><span class=\"line\">2:Reference Handler <span class=\"comment\"># 清除reference的线程</span></span><br><span class=\"line\">1:main <span class=\"comment\"># 主线程</span></span><br></pre></td></tr></table></figure>\n<p>查看以上线程所属线程组及优先级</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Thread threadOne = new Thread(() -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        threadOne.setName(<span class=\"string\">\"threadOne\"</span>);</span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadGroup threadGroup = threadOne.getThreadGroup();</span><br><span class=\"line\">        System.out.println(threadGroup);</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadGroup systemThreadGroup = threadGroup.getParent();</span><br><span class=\"line\">        System.out.println(systemThreadGroup);</span><br><span class=\"line\"></span><br><span class=\"line\">        systemThreadGroup.list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ThreadGroup[name=main,maxpri=10]</span><br><span class=\"line\">java.lang.ThreadGroup[name=system,maxpri=10]</span><br><span class=\"line\">java.lang.ThreadGroup[name=system,maxpri=10]</span><br><span class=\"line\">    Thread[Reference Handler,10,system]</span><br><span class=\"line\">    Thread[Finalizer,8,system]</span><br><span class=\"line\">    Thread[Signal Dispatcher,9,system]</span><br><span class=\"line\">    Thread[Attach Listener,5,system]</span><br><span class=\"line\">    java.lang.ThreadGroup[name=main,maxpri=10]</span><br><span class=\"line\">        Thread[main,5,main]</span><br><span class=\"line\">        Thread[Monitor Ctrl-Break,5,main]</span><br><span class=\"line\">        Thread[threadOne,5,main]</span><br></pre></td></tr></table></figure>\n<p>由此看来，当一个应用程序启动时，至少创建6个线程，两个线程组(system和main线程组)，其中system线程组是main线程组的父线程组，main与Monitor Ctrl-Break处于main线程组，其他线程处于system线程组。</p>\n","categories":["多线程"],"tags":["多线程","面试"]},{"title":"线程简介及安全性","url":"http://www.shenjian.online/2019/01/27/线程简介及安全性/","content":"<h2 id=\"1-线程的优点\"><a href=\"#1-线程的优点\" class=\"headerlink\" title=\"1. 线程的优点\"></a>1. 线程的优点</h2><p><strong>1）发挥多处理器的强大功能</strong><br><strong>2）建模的简单性</strong>  为模型中的每种类型任务都分配一个专门的线程<br><strong>3）异步事件的简化处理</strong><br><strong>4）响应更灵敏的用户界面</strong> </p>\n<h2 id=\"2-线程带来的风险\"><a href=\"#2-线程带来的风险\" class=\"headerlink\" title=\"2. 线程带来的风险\"></a>2. 线程带来的风险</h2><p><strong>1）安全性问题</strong><br><strong>2）活跃性问题</strong> 如发生死锁，无限等待<br><strong>3）性能问题</strong> 如频繁的上下文切换：保存与恢复上下文，丢失局部性，CPU花在线程切换上更多开销而不是线程上；如同步机制，抑制某些编译器优化，使内存缓存区内存无效，增加共享内存总线流量</p>\n<h2 id=\"3-线程安全性\"><a href=\"#3-线程安全性\" class=\"headerlink\" title=\"3. 线程安全性\"></a>3. 线程安全性</h2><p>如果当多个线程访问同一个可变的状态变量时没有使用合适的同步，那么程序就会出现错误。有三种方式可以修复这个问题：<br>&radic; 不在线程之间共享该变量<br>&radic; 将状态变量修改为不可变变量<br>&radic; 在访问状态变量时使用同步</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无状态对象一定是线程安全的。</span><br><span class=\"line\">无状态对象：他既不包含任何域，也不包含对其他类中域的引用</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">竞态条件： 由于不恰当的执行时序而出现的不正确的结果</span><br><span class=\"line\">竞态条件出现常见操作： 先检查后执行，如延迟初始化； 读取-修改-写入， 如i++</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-内置锁与重入\"><a href=\"#3-1-内置锁与重入\" class=\"headerlink\" title=\"3.1 内置锁与重入\"></a>3.1 内置锁与重入</h3><p>JAVA中提供了一种内置锁机制支持原子性：同步代码块<br>同步代码块分为两部分：<br>1）锁的对象引用 <code>synchronized (lock) { }</code><br>2）锁保护的代码块</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void synchronized <span class=\"function\"><span class=\"title\">count</span></span>() &#123;</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内置锁是可重入的，如果某个线程试图获得该线程已经获得的锁，那么该请求会成功<br>重入实现方式： 为每个锁关联一个获取计数器与一个所有者线程，线程进入则+1，线程退出则-1。当计数器为0，该锁将被释放</p>\n<h3 id=\"3-2-活跃性与性能\"><a href=\"#3-2-活跃性与性能\" class=\"headerlink\" title=\"3.2 活跃性与性能\"></a>3.2 活跃性与性能</h3><p><strong>当实现某个同步策略时，一定不要盲目为了性能而牺牲简单性（这可能会破环安全性）</strong></p>\n<p><strong>当执行时间较长的计算或者可能无法完成的操作时（例如，网络I/O或控制台I/O），一定不要持有锁</strong></p>\n","categories":["多线程"],"tags":["多线程"]},{"title":"数组","url":"http://www.shenjian.online/2019/01/25/数组/","content":"<h2 id=\"1-数组注意事项\"><a href=\"#1-数组注意事项\" class=\"headerlink\" title=\"1. 数组注意事项\"></a>1. 数组注意事项</h2><p><strong> 1) 通常假设数组是没有空元素</strong> 当我们查找某一元素时，如果查找了所有元素后也没有找到，就说明数组中不包含该元素。但如何确定所有元素都查找完了呢？只要我们保证所有数组中所有非空元素都排在前面，呢么当遇到第一个空元素时，则证明所有元素均已查找完毕<br><strong> 2) 当删除一个元素时，这个元素之后的所有元素均向前移动一位</strong> 在java中，就是移除数组对这个对象的引用，就是将对应的对应的位置为null,又根据第1条原则，故之后非空元素需向前移动一位<br><strong> 3) 如果是无序数组的话，添加一个元素时，总是添加在数组的最后位置</strong> 根据原则1，如果数组还剩余两个位置，不可添加到第二个位置，否则会有空元素<br><strong> 4) 通常假设数组中没有相同的元素</strong> 在数组中查找一元素时，如果有多个相同的元素值，返回单个值，还是多个值？我们通常假设数组中没有相同的元素，只需要返回第一个匹配到的值即可</p>\n<h2 id=\"2-数组复杂度\"><a href=\"#2-数组复杂度\" class=\"headerlink\" title=\"2. 数组复杂度\"></a>2. 数组复杂度</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">插入</td>\n<td style=\"text-align:center\">O(1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查找</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删除</td>\n<td style=\"text-align:center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n","categories":["算法与数据结构"],"tags":["算法与数据结构"]},{"title":"Spring与SpringMVC父子容器","url":"http://www.shenjian.online/2019/01/22/Spring与SpringMVC父子容器/","content":"<h2 id=\"1-父子容器概念\"><a href=\"#1-父子容器概念\" class=\"headerlink\" title=\"1. 父子容器概念\"></a>1. 父子容器概念</h2><p><strong>Servlet WebApplicationContext:</strong> 主要针对Web层，如控制器(Controller)、视图解析器(View Resolvers)等相关bean。通过SpringMVC提供的DispatcherServlet加载配置，通常配置文件名为spring-servlet.xml。<br><strong>Root WebApplicationContext:</strong> 主要针对Service层、Dao层，如业务bean、数据源等。在web应用中，一般通过ContextLoaderListener加载配置，通常配置文件名为applicationContext.xml。</p>\n<p>附上web.xml配置案例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;web-app version=<span class=\"string\">\"3.0\"</span> xmlns=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span>  </span><br><span class=\"line\">    xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">    xsi:schemaLocation=<span class=\"string\">\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span>&gt;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!— 创建Root WebApplicationContext --&gt;</span><br><span class=\"line\">    &lt;context-param&gt;  </span><br><span class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span><br><span class=\"line\">        &lt;param-value&gt;/WEB-INF/spring/applicationContext.xml&lt;/param-value&gt;  </span><br><span class=\"line\">    &lt;/context-param&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &lt;listener&gt;  </span><br><span class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </span><br><span class=\"line\">    &lt;/listener&gt;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!— 创建Servlet WebApplicationContext --&gt;</span><br><span class=\"line\">    &lt;servlet&gt;  </span><br><span class=\"line\">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;  </span><br><span class=\"line\">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;  </span><br><span class=\"line\">        &lt;init-param&gt;  </span><br><span class=\"line\">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span><br><span class=\"line\">            &lt;param-value&gt;/WEB-INF/spring/spring-servlet.xml&lt;/param-value&gt;  </span><br><span class=\"line\">        &lt;/init-param&gt;  </span><br><span class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </span><br><span class=\"line\">    &lt;/servlet&gt;  </span><br><span class=\"line\">    &lt;servlet-mapping&gt;  </span><br><span class=\"line\">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;  </span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </span><br><span class=\"line\">    &lt;/servlet-mapping&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<p>1、 contextLoaderListener首先被初始化，根据<context-param>元素中contextConfigLocation参数指定的配置文件路径，来创建 Root WebApplicationContext实例,并调用ServletContext中的setAttribute方法，设置key为‘org.springframework.web.context.WebApplicationContext.ROOT’， value为该WebApplicationContext实例。<br>2、DispatherServlet在初始化时，会根据<init-param>元素中contextConfigLocation参数指定的配置文件路径，创建Servlet WebApplicationContext,同时调用ServletContext的getAttribute方法来判断RootWebApplicationContext是否存在，如果存在，则设置为自己的parent。这就是父子容器的概念</init-param></context-param></p>\n<h2 id=\"2-父子容器的作用\"><a href=\"#2-父子容器的作用\" class=\"headerlink\" title=\"2. 父子容器的作用\"></a>2. 父子容器的作用</h2><p>1）查找bean时，先从子容器找，如果子容器中找不到且父容器非空，则从父容器中找到bean，类似于JVM中类加载的机制——双亲委派模型<br>2）SRP职责分离，解耦。Servlet WebApplicationContext主要针对Web层，而web层有多种选择如Spring MVC, Struts，这样即使web层框架改变并不会影响到Root WebApplicationContext中使用的配置文件，同理，dao层改变，也互不影响</p>\n<h2 id=\"3-Root-WebApplicationConetxt源码主方法\"><a href=\"#3-Root-WebApplicationConetxt源码主方法\" class=\"headerlink\" title=\"3. Root WebApplicationConetxt源码主方法\"></a>3. Root WebApplicationConetxt源码主方法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoaderListener extends ContextLoader implements ServletContextListener &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void contextInitialized(ServletContextEvent event) &#123;</span><br><span class=\"line\">        initWebApplicationContext(event.getServletContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ContextLoader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">\"Root WebApplicationContext: initialization started\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this.context == null) &#123;</span><br><span class=\"line\">            this.context = createWebApplicationContext(servletContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Servlet-WebApplicationContext源码主方法\"><a href=\"#4-Servlet-WebApplicationContext源码主方法\" class=\"headerlink\" title=\"4. Servlet WebApplicationContext源码主方法\"></a>4. Servlet WebApplicationContext源码主方法</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class HttpServletBean extends HttpServlet</span><br><span class=\"line\">        implements EnvironmentCapable, EnvironmentAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public final void init() throws ServletException &#123;</span><br><span class=\"line\">        // Let subclasses <span class=\"keyword\">do</span> whatever initialization they like.</span><br><span class=\"line\">        initServletBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void initServletBean() throws ServletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class FrameworkServlet extends HttpServletBean implements ApplicationContextAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected final void initServletBean() throws ServletException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (this.logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">            this.logger.info(<span class=\"string\">\"FrameworkServlet '\"</span> + getServletName() + <span class=\"string\">\"': initialization started\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.webApplicationContext = initWebApplicationContext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected WebApplicationContext <span class=\"function\"><span class=\"title\">initWebApplicationContext</span></span>() &#123;</span><br><span class=\"line\">        // 获取Root WebApplicationContext</span><br><span class=\"line\">        WebApplicationContext rootContext = WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class=\"line\">        WebApplicationContext wac = null;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wac == null) &#123;</span><br><span class=\"line\">            // No context instance is defined <span class=\"keyword\">for</span> this servlet -&gt; create a <span class=\"built_in\">local</span> one</span><br><span class=\"line\">            wac = createWebApplicationContext(rootContext);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DispatcherServlet extends FrameworkServlet &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-JAVA方式配置\"><a href=\"#5-JAVA方式配置\" class=\"headerlink\" title=\"5. JAVA方式配置\"></a>5. JAVA方式配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface WebApplicationInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void onStartup(ServletContext servletContext) throws ServletException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractContextLoaderInitializer implements WebApplicationInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 向ServletContext中注册ContextLoaderListener,从而创建Root WebApplicationContext</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected void registerContextLoaderListener(ServletContext servletContext) &#123;</span><br><span class=\"line\">        WebApplicationContext rootAppContext = createRootApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rootAppContext != null) &#123;</span><br><span class=\"line\">            ContextLoaderListener listener = new ContextLoaderListener(rootAppContext);</span><br><span class=\"line\">            listener.setContextInitializers(getRootApplicationContextInitializers());</span><br><span class=\"line\">            servletContext.addListener(listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"No ContextLoaderListener registered, as \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"createRootApplicationContext() did not return an application context\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractDispatcherServletInitializer extends AbstractContextLoaderInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 向ServletContext中注册DispatcherServlet，从而创建Servlet WebApplicationContext</span><br><span class=\"line\">    */</span><br><span class=\"line\">    protected void registerDispatcherServlet(ServletContext servletContext) &#123;</span><br><span class=\"line\">        String servletName = getServletName();</span><br><span class=\"line\">        WebApplicationContext servletAppContext = createServletApplicationContext();</span><br><span class=\"line\">        DispatcherServlet dispatcherServlet = createDispatcherServlet(servletAppContext);</span><br><span class=\"line\">        ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    protected abstract String[] getServletMappings();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractAnnotationConfigDispatcherServletInitializer</span><br><span class=\"line\">        extends AbstractDispatcherServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    protected abstract Class&lt;?&gt;[] getRootConfigClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">    protected abstract Class&lt;?&gt;[] getServletConfigClasses();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据Spring以上抽象类的逻辑，实现以下代码</span><br><span class=\"line\">public class MyWebConfigInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获得创建Root WebApplicationContext所需的配置类</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Class&lt;?&gt;[] <span class=\"function\"><span class=\"title\">getRootConfigClasses</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Class&lt;?[] &#123; RootConfig.class &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //获得创建Servlet WebApplicationContext所需的配置类</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Class&lt;?&gt;[] <span class=\"function\"><span class=\"title\">getServletConfigClasses</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new Class&lt;?[] &#123; ServletConfig.class &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //获得DispatchServlet拦截的url</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected String[] <span class=\"function\"><span class=\"title\">getServletMappings</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> new String[] &#123; <span class=\"string\">\"/app/*\"</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Spring"],"tags":["Spring"]},{"title":"Spring常见面试题","url":"http://www.shenjian.online/2019/01/20/Spring常见面试题/","content":"<h2 id=\"1-使用Spring框架的好处是？\"><a href=\"#1-使用Spring框架的好处是？\" class=\"headerlink\" title=\"1. 使用Spring框架的好处是？\"></a>1. 使用Spring框架的好处是？</h2><p><strong>轻量</strong>  Spring是轻量的，基本版本约为2M<br><strong>控制反转(IOC)</strong> Spring通过控制反转实现松耦合，对象们给出了依赖，而不是创建与查找依赖的对象们<br><strong>面向切面(AOP)</strong> Spring支持AOP编程，把业务逻辑与系统服务分开<br><strong>容器</strong> Spring管理应用中对象的生命周期与配置<br><strong>MVC框架</strong><br><strong>事务管理</strong> Spring提供事务管理接口，上至本地事务，下至全局事务<br><strong>异常处理</strong> Spring提供API将具体技术相关的异常转化为一致的unchecked异常</p>\n<h2 id=\"2-Spring由哪些模块组成\"><a href=\"#2-Spring由哪些模块组成\" class=\"headerlink\" title=\"2. Spring由哪些模块组成\"></a>2. Spring由哪些模块组成</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring-core  spring-beans  spring-context  spring-aop  spring-expression</span><br><span class=\"line\">spring-jdbc  spring-oxm    spring-tx       spring-web  spring-webmvc</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-ApplicationContext通常的实现是什么？\"><a href=\"#3-ApplicationContext通常的实现是什么？\" class=\"headerlink\" title=\"3. ApplicationContext通常的实现是什么？\"></a>3. ApplicationContext通常的实现是什么？</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassPathXmlApplicationContext</span><br><span class=\"line\">FileSystemXmlApplicationContext</span><br><span class=\"line\">WebXmlApplicationContext</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-解释Spring支持的几种bean的作用域\"><a href=\"#4-解释Spring支持的几种bean的作用域\" class=\"headerlink\" title=\"4. 解释Spring支持的几种bean的作用域\"></a>4. 解释Spring支持的几种bean的作用域</h2><p><strong>singleton</strong> 容器中只有一个对应bean实例<br><strong>prototype</strong> 一个bean的定义有多个实例<br><em>以下四种基于web模块下的webApplicationContext</em><br><strong>request</strong><br><strong>session</strong><br><strong>globalSession</strong><br><strong>application</strong></p>\n<h2 id=\"5-Spring框架中的单例bean是线程安全的吗\"><a href=\"#5-Spring框架中的单例bean是线程安全的吗\" class=\"headerlink\" title=\"5. Spring框架中的单例bean是线程安全的吗\"></a>5. Spring框架中的单例bean是线程安全的吗</h2><p>不是</p>\n<h2 id=\"6-解释Spring框架中bean的生命周期\"><a href=\"#6-解释Spring框架中bean的生命周期\" class=\"headerlink\" title=\"6. 解释Spring框架中bean的生命周期\"></a>6. 解释Spring框架中bean的生命周期</h2><p>1) Spring容器从XML文件中读取bean的定义，并实例化bean<br>2) Spring根据bean的定义填充所有属性<br>3) 如果bean实现了BeanNameAware接口，Spring传递bean的Id到setBeanName方法<br>4) 如果bean实现了BeanFactoryAware接口, Spring传递beanFactory到setBeanFactory方法<br>5) 如果bean实现了BeanPostProcessors接口，postProcessorBeforeInitialization方法将被调用<br>6) 如果bean实现了InitializingBean接口，afterPropertiesSet方法被调用；如果bean声明了初始化方法，则调用该初始化方法<br>7) 如果bean实现了BeanPostProcessors接口，postProcessorAfterInitialization方法将被调用<br>8) 如果bean实现了DisposableBean接口，destroy方法将被调用</p>\n","categories":["Spring"],"tags":["面试","Spring"]},{"title":"Linux工作常用命令","url":"http://www.shenjian.online/2019/01/17/Linux工作常用命令/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看软件安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> ftp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看端口占用情况</span></span><br><span class=\"line\">netstat -anp | grep 端口号</span><br><span class=\"line\">netstat -tunlp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建FTP用户默认登录目录</span></span><br><span class=\"line\">useradd -d /opt/tomcat shenjian</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 密码设置</span></span><br><span class=\"line\">passwd shenjian</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为FTP用户授权目录操作权限</span></span><br><span class=\"line\">chown -hR shenjian /opt/tomcat/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录权限设置</span></span><br><span class=\"line\">chmod 755 /opt/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"comment\">## -C 指定目标目录</span></span><br><span class=\"line\">tar -zxvf [源文件] -C [目标目录]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar -zcvf [目标压缩文件] [源文件]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地安装</span></span><br><span class=\"line\">yum localinstall *.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum install net-tools <span class=\"comment\"># netstat安装</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm安装</span></span><br><span class=\"line\"><span class=\"comment\">## ivh 安装显示安装进度--install--verbose--hash</span></span><br><span class=\"line\">rpm -ivh XXX.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">uname -r <span class=\"comment\"># 查看系统信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">########## 性能监控调优 ##########</span></span><br><span class=\"line\"><span class=\"comment\"># 线程上下文切换次数查看 </span></span><br><span class=\"line\"><span class=\"comment\">## 1|每秒 10|统计10次, 结果中cs是context switch,即上下文切换次数</span></span><br><span class=\"line\">vmstat 1 10 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程PID查看</span></span><br><span class=\"line\">jps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转储pid=1159的线程信息至文件dump1</span></span><br><span class=\"line\">jstack 1159 &gt; /opt/temp/dump1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程运行状态打印统计</span></span><br><span class=\"line\"><span class=\"comment\">## sort|排序 uniq 去重与空行 -c 统计打印次数 </span></span><br><span class=\"line\">grep java.lang.Thread.State /opt/temp/dump1 | awk <span class=\"string\">'&#123;print $2$3$4$5&#125;'</span> | sort | uniq -c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux线程模型查看</span></span><br><span class=\"line\"><span class=\"comment\">## linuxthreads-0.10(该线程模型一个进程限制创建1024个线程) 或者 NPTL 2.12(无限制)</span></span><br><span class=\"line\">getconf GNU_LIBPTHREAD_VERSION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 操作系统线程栈大小查看 </span></span><br><span class=\"line\"><span class=\"comment\">## 操作系统线程栈默认10M,JVM栈内存默认1M</span></span><br><span class=\"line\"><span class=\"comment\">## 一个Java进程中可以创建的线程数主要是受到JVM可以使用的内存大小的影响，而不是操作系统的总内存。</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 虚拟机Centos7网络配置及DNS</span></span><br><span class=\"line\"><span class=\"comment\">## ifcfg-ens后可能不一样 /etc/sysconfig/network-scripts/ifcfg-ens32  /etc/sysconfig/network-scripts/ifcfg-lo</span></span><br><span class=\"line\">sudo ls /etc/sysconfig/network-scripts/ifcfg-*</span><br><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-ens32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># centos7 防火墙</span></span><br><span class=\"line\">firewall-cmd --state <span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">systemctl stop firewalld.service <span class=\"comment\"># 关闭防火墙</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\"># 禁止开机自启动</span></span><br></pre></td></tr></table></figure>\n<p>以下为windows常用命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看端口占用情况</span></span><br><span class=\"line\">netstat -ano|findstr 端口号</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制查杀指定进程 </span></span><br><span class=\"line\"><span class=\"comment\">##-t 终止指定的进程和由它启用的子进程 </span></span><br><span class=\"line\"><span class=\"comment\">##-f 指定强制终止进程</span></span><br><span class=\"line\">taskkill /pid 进程号 -t -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找指定PID并杀死进程</span></span><br><span class=\"line\"><span class=\"comment\">## /f \"tokens=2\"： 文件的第二个属性 %%a： 变量(特别注意，在单独执行命令时使用%a，在脚本中执行时使用%%a) /fi： 过滤 /nh： 不显示列标题</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> /f <span class=\"string\">\"tokens=2\"</span> %%a <span class=\"keyword\">in</span> (<span class=\"string\">'tasklist /fi \"imagename eq soffice.exe\" /nh'</span>) <span class=\"keyword\">do</span> taskkill /pid %%a  -t -f</span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["Linux"]},{"title":"Object转JSON日期格式化并保持数据顺序及Value为空Key仍返回","url":"http://www.shenjian.online/2019/01/10/Object转JSON保持数据顺序及Value为空Key仍返回/","content":"<h2 id=\"业务背景\"><a href=\"#业务背景\" class=\"headerlink\" title=\"业务背景\"></a>业务背景</h2><p>（1）项目全景不可配置化，过程修改返回字段前端页面也需相应修改，可扩展性差。<br>（2）要想可配置化，字段需从过程中取，但AJAX返回的JSON数据KEY顺序不与过程中返回字段顺序一致</p>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><p>fastjson在Object转JSON的时候，底层采用HashMap, 若有序，则需为LinkedHashMap, 查看源码发现</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public JSONObject(int initialCapacity, boolean ordered)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (ordered) &#123;</span><br><span class=\"line\">           map = new LinkedHashMap&lt;String, Object&gt;(initialCapacity);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           map = new HashMap&lt;String, Object&gt;(initialCapacity);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>可是Object如何转为JSON字符串，查看源码并没有发现转的方法，但是过程中返回的是标准的Map类型，故贴上以下代码</p>\n<h2 id=\"解决代码\"><a href=\"#解决代码\" class=\"headerlink\" title=\"解决代码\"></a>解决代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SerializeConfig serializeConfig = new SerializeConfig();</span><br><span class=\"line\">ObjectSerializer serializer = new SimpleDateFormatSerializer(DateUtils.format());</span><br><span class=\"line\">serializeConfig.put(Timestamp.class, serializer);</span><br><span class=\"line\">serializeConfig.put(java.sql.Date.class, serializer);</span><br><span class=\"line\">serializeConfig.put(Date.class, serializer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj instanceof Map)&#123;</span><br><span class=\"line\">    JSONObject jsonObject = new JSONObject(16, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    jsonObject.putAll((Map) obj);</span><br><span class=\"line\">    // 输出key时是否使用双引号,默认为<span class=\"literal\">true</span></span><br><span class=\"line\">    // 是否输出值为null的字段,默认为<span class=\"literal\">false</span></span><br><span class=\"line\">    result = JSON.toJSONStringZ(jsonObject, serializeConfig, SerializerFeature.QuoteFieldNames, SerializerFeature.WriteMapNullValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["工作干货"],"tags":["工作干货"]},{"title":"Java并发机制底层实现原理之volatile","url":"http://www.shenjian.online/2019/01/10/Java并发机制底层实现原理之volatile/","content":"<p>如果一个字段被声明成volatile，Java内存模型保证所有线程看到这个变量的值是一致的。</p>\n<h1 id=\"1-实现原理\"><a href=\"#1-实现原理\" class=\"headerlink\" title=\"1. 实现原理\"></a>1. 实现原理</h1><p>有volatile修饰的变量进行写操作时会多出带有lock前缀的汇编指令，该指令在多核处理器中引发两件事情：<br>1）将当前处理器缓存行的数据写回系统内存。 通过总线锁定或缓存锁定。<br>2）这个写回内存的操作会使其他CPU中缓存了该内存地址的数据无效。 其他处理器通过嗅探总线上传播过来的数据监测自己工作内存中缓存是否过期。过期，修改的时候则从主存中重新读取。</p>\n<h1 id=\"2-内存语义层次理解\"><a href=\"#2-内存语义层次理解\" class=\"headerlink\" title=\"2. 内存语义层次理解\"></a>2. 内存语义层次理解</h1><h2 id=\"2-1-volatile的特性\"><a href=\"#2-1-volatile的特性\" class=\"headerlink\" title=\"2.1 volatile的特性\"></a>2.1 volatile的特性</h2><p>volatile变量自身具有以下特性：</p>\n<ul>\n<li>可见性：对一个volatile变量的读，总是能看到任意线程对这个volatile变量最后的写入</li>\n<li>原子性：对任意单个volatile变量的读/写具有原子性，但类似于volatile++这种复合操作不具有原子性，如</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> v = <span class=\"number\">0L</span>;</span><br><span class=\"line\">v = <span class=\"number\">200L</span>; <span class=\"comment\">// 具有原子性</span></span><br><span class=\"line\">v++; <span class=\"comment\">// 不具有原子性</span></span><br></pre></td></tr></table></figure>\n<p>ps: JDK5开始，JSR-133内存模型只允许64位long/double型的写操作拆分为两个32位的写操作来执行，任意的读操作在JSR-133中都必须具有原子性。</p>\n<h2 id=\"2-2-volatile的写-读内存语义\"><a href=\"#2-2-volatile的写-读内存语义\" class=\"headerlink\" title=\"2.2 volatile的写-读内存语义\"></a>2.2 volatile的写-读内存语义</h2><p>写内存语义： 当写一个volatile变量时，JMM会把线程对应的本地内存的共享变量刷新到主内存<br>读内存语义： 当读一个volatile变量时，JMM会把该线程对应的本地内存置于无效，线程接下来将从主内存读取共享变量</p>\n<h2 id=\"2-3-重排序与volatile内存语义的实现\"><a href=\"#2-3-重排序与volatile内存语义的实现\" class=\"headerlink\" title=\"2.3 重排序与volatile内存语义的实现\"></a>2.3 重排序与volatile内存语义的实现</h2><h3 id=\"2-3-1-重排序简介\"><a href=\"#2-3-1-重排序简介\" class=\"headerlink\" title=\"2.3.1 重排序简介\"></a>2.3.1 重排序简介</h3><p>为了提高性能，处理器与编译器会对指令做重排序，分为3种类型：<br>1）编译器优化的重排序 不改变单线程程序语义，重新安排语句执行顺序<br>2）指令级并行的重排序 若不存在数据依赖性，处理器可以改变语句对机器指令的执行顺序<br>3）内存系统的重排序 处理器采用缓存和读、写缓冲区，使得加载与存储看上去是乱序执行</p>\n<p>1）属于编译器重排序 2)、3)属于处理器重排序。为了实现volatile内存语义，需要JMM会分别限制这两大类型的重排序。</p>\n<h3 id=\"2-3-2-volatile内存语义具体实现\"><a href=\"#2-3-2-volatile内存语义具体实现\" class=\"headerlink\" title=\"2.3.2 volatile内存语义具体实现\"></a>2.3.2 volatile内存语义具体实现</h3><p>volatile写： 前面插入StoreStore屏障(禁止该屏障前的普通写与volatile写重排序)， 后面插入StoreLoad屏障(防止volatile写与该屏障后的可能有的volatile读/写重排序)<br>volatile读： 后面首先插入一个LoadLoad(禁止该屏障后所有的普通读操作与volatile读重排序)，然后插入LoadStore屏障(禁止该屏障后所有的普通写操作与volatile读重排序)</p>\n<h1 id=\"3-使用优化\"><a href=\"#3-使用优化\" class=\"headerlink\" title=\"3. 使用优化\"></a>3. 使用优化</h1><p>JDK7并发包中新增了一个队列集合类LinkedTransferQueue, 他在使用volatile变量时，用一种追加字节的方式来优化队列的入队与出队的性能。使用追加到64字节的方式填满同一个高速缓冲行，避免头结点与尾节点加载到同一个缓存行，使头、尾节点在修改时都不会相互锁定。  </p>\n<h1 id=\"4-实际使用场景–状态变量标记\"><a href=\"#4-实际使用场景–状态变量标记\" class=\"headerlink\" title=\"4. 实际使用场景–状态变量标记\"></a>4. 实际使用场景–状态变量标记</h1><p>一般业务场景中用于 volatile static Boolean flag = true</p>\n<p>在双重检查锁定中起到防止重排序作用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeDoubleCheckedLocking</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Instance instance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Instance <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 第一次检查</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(SafeDoubleCheckedLocking.class) &#123; <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 第二次检查</span></span><br><span class=\"line\">\t\t\t\t\tinstance = <span class=\"keyword\">new</span> Instance(); <span class=\"comment\">// 该步骤有三小步 (1)分配对象的内存空间 (2)初始化对象 (3)设置instance指向刚分配的内存地址 volatile就是防止(2)与(3)重排序</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1)</p>\n<p>ps: CPU术语定义<br>内存屏障： 是一组处理器指令，用于实现对内存操作的顺序控制<br>缓存行： CPU高速缓存中可以分配的最小存储单位，处理器填写缓存行时会加载整个缓存行<br>数据依赖性： 如果两个操作同时访问一个变量，其中一个操作为写操作，则这两个操作存在数据依赖性</p>\n","categories":["多线程"],"tags":["多线程","面试"]},{"title":"内存溢出遇到过吗，怎么处理","url":"http://www.shenjian.online/2019/01/09/内存溢出遇到过吗，怎么处理/","content":"<p>首先要仔细分析日志，根据报错的类层层查找，重点按以下几点进行排查：</p>\n<h2 id=\"审查静态对象\"><a href=\"#审查静态对象\" class=\"headerlink\" title=\"审查静态对象\"></a>审查静态对象</h2><p>对于静态对象要特别留神，特别是类型为Map、List、Set，静态的变量会一直驻存在内存中，生命周期比较长，不会被垃圾器回收</p>\n<h2 id=\"审查栈变量\"><a href=\"#审查栈变量\" class=\"headerlink\" title=\"审查栈变量\"></a>审查栈变量</h2><p>不用的变量设成Null以便回收，多用局部变量，少用成员变量</p>\n<h2 id=\"审查String类相关\"><a href=\"#审查String类相关\" class=\"headerlink\" title=\"审查String类相关\"></a>审查String类相关</h2><p>1）字符串累加的尽量用StirngBuffer或StringBuilder的append方法，避免使用+操作符连接两个字符串。<br>2）在循环中不要去创建String对象。</p>\n<h2 id=\"审查频繁申请内存与释放内存的操作\"><a href=\"#审查频繁申请内存与释放内存的操作\" class=\"headerlink\" title=\"审查频繁申请内存与释放内存的操作\"></a>审查频繁申请内存与释放内存的操作</h2><p>对于频繁申请释放内存的操作，System.gc()不一定适用，因为JVM并不保证调用该方法就一定能启动垃圾回收集，它只不过是向JVM发出一定申请，最好使用finallize强制执行。</p>\n","categories":["JAVA"],"tags":["面试"]},{"title":"搜索","url":"http://www.shenjian.online/search/index.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"http://www.shenjian.online/category/index.html","content":"","categories":[],"tags":[]},{"title":"友链","url":"http://www.shenjian.online/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 鱼鱼的博客<br>info: hyperactive fish<br>url: <a href=\"https://www.fishmaple.cn/\" target=\"_blank\" rel=\"noopener\">https://www.fishmaple.cn/</a><br>avatar: <a href=\"https://www.fishmaple.cn/pics/logo-fish-small.png\" target=\"_blank\" rel=\"noopener\">https://www.fishmaple.cn/pics/logo-fish-small.png</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"标签","url":"http://www.shenjian.online/tag/index.html","content":"","categories":[],"tags":[]}]